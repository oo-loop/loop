@use 'sass:map';
@use 'sass:meta';
@use '../fn';

/// ooMergeDeep
/// Non destructive map merge in the ooLoop. 
/// @credit-to  https://gist.github.com/pentzzsolt
/// @param map $parentMap Map of data to be merged into
/// @param map $childMap The set of data
/// @param map $refMap The base map to refer too, usually equivalent to the $ooLoop before going into nested merge
/// @param bool $forceKebab force the use of kebab-case property
/// @return map

@function ooMergeDeep($parentMap, $childMap, $refMap: null, $forceKebab: false) {
  $map: $parentMap;

  @if not fn.isMap($map) {
    @return $map;
  }

  $refMap: if($refMap ==null, $ooLoop, $refMap);

  @each $key, $value in $childMap {
    $key: if($forceKebab, fn.toKebabCase($key), $key);

    @if isRef(map.get($map, $key)) {
      $mapValue: getRefValue(map.get($map, $key), $refMap);
      $map: map.merge($map, ($key: $mapValue));
    }

    @if (not map.has-key($map, $key)) or (meta.type-of(map.get($map, $key)) != meta.type-of($value)) or (not (fn.isMap(map.get($map, $key)) and fn.isMap($value))) {
      $map: map.merge($map, ($key: $value));
    }

    @else {
      $map: map.merge($map, ($key: ooMergeDeep(map.get($map, $key), $value, $refMap, fn.inList($key, ('props', 'states')))));
    }
  }

  @return $map;
}