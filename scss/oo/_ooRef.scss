@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use 'sass:string';
@use '../fn';

/// hasRef
/// Check if a map has a ooFormat
/// @param mixed
/// @return bool

@function hasRef($search) {
  @if fn.isNotString($search) {
    $search: meta.inspect($search);
  }
  @return if(string.index($search, 'this(') == null, false, true);
}


/// isRef
/// Check if a string is a ooFormat
/// @param string $string
/// @return bool

@function isRef($string) {
  @if fn.isNotString($string) {
    $string: meta.inspect($string);
  }
  @return string.slice($string, 1, 5) == 'this(' and string.slice($string, string.length($string)) == ')';
}

/// hasSpreadOperator
/// Check if a reference has the spread operator  
/// @param string  $ref
/// @return bool

@function hasSpreadOperator($ref) {
  @if fn.isNotString($ref) {
    $ref: meta.inspect($ref);
  }
  @return if(string.index($ref, '_this(') == null, false, true);
}

/// getRefPath
/// get the ooFormat reference path
/// @param string $string
/// @return String

@function getRefPath($string) {
  @if fn.isNotString($string) {
    $string: meta.inspect($string);
  }
  @return string.slice($string, 6, -2);
}

/// getRefValue
/// Retrieve the value of a reference
/// @param string $ref the reference
/// @param map $map the map look through
/// @return mixed

@function getRefValue($ref, $map) {
  $value: oo(getRefPath($ref), $map);
  @if isRef($value) {
    $value: getRefValue($value, $map);
  }
  @return $value;
}

/// getSpreadMap
/// Return the map built by the spreads 
/// @param list $list the list creating the map
/// @param map $map the map look through
/// @return map

@function getSpreadMap($list, $map) {
  @if fn.isNotList($list) {
    @error 'spread operator must be used within a list';
  }
  $newMapValue: ();
  @for $i from 1 through list.length($list) {
    @if hasSpreadOperator(list.nth($list, $i)) {
      $ref: extractRef(list.nth($list, $i));
      $refValue: getRefValue($ref, $map);
      @if hasSpreadOperator($refValue) {
        $refValue: getSpreadMap($refValue, $map);
      }
      @if fn.isNotMap($refValue) {
        //the use of replace is for some sass version
        $refPathList: fn.splitDeep('.', fn.replace('"', '', getRefPath($ref)));
        $refValue: (list.nth($refPathList, list.length($refPathList)): $refValue);
      }
      $newMapValue: map.merge($newMapValue, $refValue);
    } @else if fn.isNotMap(list.nth($list, $i)) {
      @error 'spread operator only works along map';
    } @else {
      $newMapValue: map.merge($newMapValue, list.nth($list, $i));
    }
  }
  @return $newMapValue;
}

/// extractRef
/// extract the ooFormat reference from a string
/// @param string  $string The string to extract the ref from
/// @return string

@function extractRef($string) {
  @if fn.isNotString($string) {
    $string: meta.inspect($string)
  }
  @if not hasRef($string) {
    @return $string;
  }
  $extractString: fn.extract('this(', ')', $string);
  @return $extractString;
}