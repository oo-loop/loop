@use 'sass:list';
@use 'sass:string';
@use '../fn';

/// ooParse
/// Parse a map of data making sure all references is being replaced
/// @param map $map
/// @return map

@function ooParse($map) {
  $map: parser($map);

  @if (hasRef($map)) {
    $map: ooParse($map);
  }

  @return $map;
}

/// parser
/// Parse a map of data with potential ref `this()` within
/// @param map $map
/// @param map $backup the backupMap to refer to when getting data in a nested map
/// @param string $path  a ooPathFormat to keep in mind where we are in a nested map
/// @return map

@function parser($map, $backup:null, $path:'') {
  $parentMap: if($backup == null, $map, $backup);
  
  @each $key, $value in $map {
    @if fn.isMap($value) {
      // set path to remember where we came from in a nested environment
      $path: if(fn.isEmpty($path), '#{$key}', '#{$path}.#{$key}');
      $newValue: parser($value, $parentMap, $path);
      $map: fn.setMapValue($map, $key, $newValue);
      // clear latest child in path to go backup in the nested environment 
      $path: if(list.length(fn.splitDeep('.', $path)) > 1, fn.replace('.#{$key}', '', $path), fn.replace('#{$key}', '', $path));
    } @else if hasRef($value) {
      $ooRef: extractRef($value);
      $newValue: getRefValue($ooRef, $parentMap);

      @if hasSpreadOperator($value) {
        $newValue: getSpreadMap($value, $parentMap);
      }
      
      @if fn.isList($value) and fn.isNotMap($newValue) {
        $refIndex: list.index($value, $ooRef);
        $newListValue: ();
        @for $i from 1 through list.length($value) {
          @if (isAlias(list.nth($value, $i))) {
            @if hasRef($newValue) {
              $newListValue: list.append($newListValue, fn.replace($ooRef, $newValue, list.nth($value, $i)));
            } @else {
              $newListValue: list.append($newListValue, getAliasValue(list.nth($value, $i), $newValue));
            }
          } @else if ($i == $refIndex) {
            $newListValue: list.append($newListValue, $newValue)
          } @else {
            $newListValue: list.append($newListValue, list.nth($value, $i))
          }
        }
        $newValue: $newListValue;
      }

      @if isAlias($value) and fn.isNotList($value) {
        @if hasRef($newValue) {
          $newValue: string.replace($ooRef, $newValue, $value);
        } @else {
          $newValue: getAliasValue($value, $newValue);
        }
      }

      $map: ooSetSoft($key, $newValue, $map);

      //update backup
      @if fn.isEmpty($path) {
        $parentMap: ooMergeDeep($parentMap, $map);
      } @else {
        $parentMap: ooSetSoft($path, $map, $parentMap);
      }
    }
  }

  @return $map;
}
