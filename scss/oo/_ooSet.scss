@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use '../fn';

/// ooSet
/// Set value in to map with the ooFormat (default $ooLoop)
/// @param string $key  ooFormat key
/// @param mixed  $value  the new value to set
/// @param bool   $hard  is the hard mode (destructive) or soft (non destructive)
/// @param map|null $map the map to update (default $ooLoop)
/// @return mixed

@function ooSet($key, $value, $hard:true, $map:null) {
  $map: if($hard, ooSetHard($key, $value, $map), ooSetSoft($key, $value, $map));
  @return $map;
}

@function ooSetSoft($key, $value, $map:null) {
  $list: fn.splitDeep('.', $key);
  $map:  if($map == null, $ooLoop, $map);
  
  @if isRef($value) {
    $value: getRefValue($value, $map);
  }
  
  @if list.length($list) > 1 {
    $mapValue: $value;
    @for $i from 1 through list.length($list) {
      $mapValue: ( #{list.nth($list, list.length($list) - $i + 1)} : $mapValue );
    }
    $map: ooMergeDeep($map, $mapValue);
  } @else {
    $map: ooMergeDeep($map, (#{$key}: $value));
  }
  
  @return $map;
}

@function ooSetHard($key, $value, $map:null) {
  $list: fn.splitDeep('.', $key);
  $map:  if($map == null, $ooLoop, $map);

  @if isRef($value) {
    $value: getRefValue($value, $map);
  }

  @if list.length($list) > 1 {
    $key: fn.replace("#{list.nth($list , 1)}.", '', $key);
    $mapValue: fn.getMapValue($map, list.nth($list , 1));

    @if ($mapValue == null) {
      $mapValue: ();
    }

    $map: map.merge(
      $map,
      (
        list.nth($list, 1): map.merge(
          $mapValue, 
          ooSetHard($key, $value, $mapValue)
        ),
      )
    );
  } @else {
    $map: map.merge($map, ($key: $value));
  }

  @return $map;
}