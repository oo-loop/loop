@import 'props';

/// Create component
/// @param string $name 

@mixin ooComponent($name) {
  @if isNotString($name) {
    @error 'Parameter $name on ooComponent must be a string';
  }
  [#{ooPrefix()}-#{$name}] {
    @content;
  }
}

/// Create component Variant
/// @param string $name
/// @param string $variantName

@mixin ooComponentVariant($name, $variantName) {
  @if isNotString($name) {
    @error 'Parameter $name on ooComponentVariant must be a string';
  }
  @if isNotString($variantName) {
    @error 'Parameter $variantName on ooComponentVariant must be a string';
  }
  [#{ooPrefix()}-#{$name}~="#{$variantName}"] {
    @content;
  }
}

/// Generate Component Variants
/// @param $componentName Name of the component to attach the variants
/// @param $variantsMap

@mixin generateComponentVariants($componentName, $variantsMap) {
  @if isNotEmpty($variantsMap) {
    @each $name, $props in $variantsMap {
      @if isMap($props) {
        [#{ooPrefix()}-#{$componentName}~="#{toKebabCase($name)}"] {
          @include generateProperties($props);
        }
      }
    }
  }
}


/// Generate Component
/// @param $componentMap

@mixin generateComponent($componentMap) {
  $name: if(map-has-key($componentMap, 'name'), toKebabCase(map-get($componentMap, 'name')), null);
  $hasProps: if(map-has-key($componentMap, 'props') or map-has-key($componentMap, 'states'), true, false);
  $variants: if(map-has-key($componentMap, 'variants'), map-get($componentMap, 'variants'), null);

  @if isNotEmpty($name) and $hasProps {
    [#{ooPrefix()}-#{$name}] {
      @include generateStyles($componentMap);
    }
  }
  @if isNotEmpty($name) and isNotEmpty($variants) {
    @include generateComponentVariants($name, $variants);
  }
}

@mixin generateComponents($components) {
  @each $name, $componentMap in $components {
    @if not map-has-key($componentMap, 'name') {
      $componentMap: map-merge(('name': $name) , $componentMap);
    }
    @include generateComponent($componentMap);
  }
}