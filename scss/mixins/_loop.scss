/**
 * Loop
 */

@import 'breakpoint';

@mixin loopProperties($properties, $value, $is-important) {
  // multiple properties
  @if isList($properties) {
    @each $property in $properties {
      #{$property}: if($is-important, #{$value} !important, #{$value});
    }
  } @else {
    #{$properties}: if($is-important, #{$value} !important, #{$value});
  }
}

/**
 * Loop
 *
 * @param $data         list|map    Data to loop through
 * @param $properties   string|list Property name to use
 * @param $prefix       string      String to prepend to the selector
 * @param $is-important ?bool       Set the !important flag ?
 * @param $suffix       ?string     String to append to the selector
 */

@mixin loop($data, $properties, $prefix, $is-important:false, $suffix:'') {
  $affix: '-';

  // Make sure to have the correct format or do not generate rules
  @if isNotEmpty($data) {
    @if isString($data) {
      #{$prefix}-#{$data}#{$suffix} {
        @include loopProperties($properties, $data, $is-important);
      }
    } @else if isList($data) {
      @each $value in $data {
        #{$prefix}-#{$value}#{$suffix} {
          @include loopProperties($properties, $value, $is-important);
        }
      }
    } @else if isMap($data) {
      @each $key, $value in $data {
        $affix: if(isEmpty($key), '', $affix);

        #{$prefix}#{$affix}#{$key}#{$suffix} {
          // responsive properties ?
          @if isMap($value) {
            @each $child-breakpoint, $child-value in $value {
              @include breakpoint($child-breakpoint) {
                @include loopProperties($properties, $child-value, $is-important);
              }
            }
          } @else {
            @include loopProperties($properties, $value, $is-important);
          }
        }
      }
    }
  }
}


/**
 * Loop breakpoints
 *
 * @param $breakpoints  list        List of breakpoints classes
 * @param $data         list|map    Data to loop through
 * @param $properties   string|list Property name to use
 * @param $prefix       string      String to prepend to the selector
 * @param $is-important ?bool       Set the !important flag ?
 * @param $suffix       ?string     String to append to the selector
 */
@mixin loopBreakpoints($breakpoints, $data, $properties, $prefix, $is-important:false, $suffix:'') {
  @if isNotEmpty($breakpoints) and isNotEmpty($data) {
    @each $breakpoint in oo('screens') {
      @include breakpoint($breakpoint) {
        $suffixes: #{$suffix}\@#{$breakpoint};
        @include loop($data, $properties, $prefix, $is-important, $suffixes);
      }
    }
  }
}
