@import 'breakpoint';

/**
 * Loop Properties
 */
@mixin loopProperties($properties, $value, $isImportant) {
  // multiple properties
  @if isList($properties) {
    @each $property in $properties {
      #{$property}: if($isImportant, #{$value} !important, #{$value});
    }
  } @else {
    #{$properties}: if($isImportant, #{$value} !important, #{$value});
  }
}

/**
 * Loop
 *
 * @param list|map $data Data to loop through
 * @param string|list $properties Property name to use
 * @param string $prefix String to prepend to the selector
 * @param bool|false $isImportant Set the !important flag ?
 * @param $suffix string String to append to the selector
 */
@mixin loop($data, $properties, $prefix, $isImportant:false, $suffix:'') {
  // Make sure to have the correct format or do not generate rules
  @if isNotEmpty($data) {
    @if isString($data) {
      #{$prefix}-#{$data}#{$suffix} {
        @include loopProperties($properties, $data, $isImportant);
      }
    } @else if isList($data) {
      @each $value in $data {
        #{$prefix}-#{$value}#{$suffix} {
          @include loopProperties($properties, $value, $isImportant);
        }
      }
    } @else if isMap($data) {
      @each $key, $value in $data {
        $affix: if(isEmpty($key), '', '-');

        #{$prefix}#{$affix}#{$key}#{$suffix} {
          // responsive properties ?
          @if isMap($value) and str-index($suffix, $substring: "\@") == null {
            @each $child-breakpoint, $child-value in $value {
              @include breakpoint($child-breakpoint) {
                @include loopProperties($properties, $child-value, $isImportant);
              }
            }
          } @else if isNotMap($value) {
            @include loopProperties($properties, $value, $isImportant);
          }
        }
      }
    }
  }
}

/**
 * Loop breakpoints
 *
 * @param list $breakpoints List of breakpoints classes
 * @param list|map $data Data to loop through
 * @param string|list $properties Property name to use
 * @param string $prefix String to prepend to the selector
 * @param bool|false $isImportant Set the !important flag ?
 * @param string $suffix String to append to the selector
 */
@mixin loopBreakpoints($breakpoints, $data, $properties, $prefix, $isImportant:false, $suffix:'') {
  @if isNotEmpty($breakpoints) and isNotEmpty($data) {
    @if isString($breakpoints) {
      $breakpoints: toList($breakpoints);
    }
    @each $breakpoint in $breakpoints {
      @include breakpoint($breakpoint) {
        $breakpointSuffix: #{$suffix}\@#{$breakpoint};
        @include loop($data, $properties, $prefix, $isImportant, $breakpointSuffix);
      }
    }
  }
}
