@use 'sass:string';
@use '../fn';

// Loop Properties
@mixin loopProperties($properties, $value, $isImportant) {
  // multiple properties
  @if fn.isList($properties) {
    @each $property in $properties {
      #{$property}: if($isImportant, #{$value} !important, #{$value});
    }
  } @else {
    #{$properties}: if($isImportant, #{$value} !important, #{$value});
  }
}


/// Loop
/// @param list|map $data Data to loop through
/// @param string|list $properties Property name to use
/// @param string $prefix String to prepend to the selector
/// @param bool|false $isImportant Set the !important flag ?
/// @param $suffix string String to append to the selector

@mixin loop($data, $properties, $prefix, $isImportant:false, $suffix:'') {
  // Make sure to have the correct format or do not generate rules
  @if fn.isNotEmpty($data) {
    @if fn.isString($data) {
      #{$prefix}-#{$data}#{$suffix} {
        @include loopProperties($properties, $data, $isImportant);
      }
    } @else if fn.isList($data) {
      @each $value in $data {
        #{$prefix}-#{$value}#{$suffix} {
          @include loopProperties($properties, $value, $isImportant);
        }
      }
    } @else if fn.isMap($data) {
      @each $key, $value in $data {
        $affix: if(fn.isEmpty($key), '', '-');

        #{$prefix}#{$affix}#{$key}#{$suffix} {
          // responsive properties ?
          @if fn.isMap($value) and string.index($suffix, $substring: "\@") == null {
            @each $child-breakpoint, $child-value in $value {
              @include breakpoint($child-breakpoint) {
                @include loopProperties($properties, $child-value, $isImportant);
              }
            }
          } @else if fn.isNotMap($value) {
            @include loopProperties($properties, $value, $isImportant);
          }
        }
      }
    }
  }
}

/// Loop breakpoints
/// @param list $breakpoints List of breakpoints classes
/// @param list|map $data Data to loop through
/// @param string|list $properties Property name to use
/// @param string $prefix String to prepend to the selector
/// @param bool|false $isImportant Set the !important flag ?
/// @param string $suffix String to append to the selector

@mixin loopBreakpoints($breakpoints, $data, $properties, $prefix, $isImportant:false, $suffix:'') {
  @if fn.isNotEmpty($breakpoints) and fn.isNotEmpty($data) {
    @if fn.isString($breakpoints) {
      $breakpoints: fn.toList($breakpoints);
    }
    @each $breakpoint in $breakpoints {
      @include breakpoint($breakpoint) {
        $breakpointSuffix: #{$suffix}\@#{$breakpoint};
        @include loop($data, $properties, $prefix, $isImportant, $breakpointSuffix);
      }
    }
  }
}
