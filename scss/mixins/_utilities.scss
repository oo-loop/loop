@import '../functions/replace';
@import '../functions/type';
@import 'loop';

/**
 * Generate Utilities
 * @param $utilitiesMap 
 */

 @mixin generateUtilities($utilitiesMap) {

  @if map-has-key($utilitiesMap, 'values')
    and map-has-key($utilitiesMap, 'name') {
    $utilitiesMap: (map-get($utilitiesMap, 'name'): $utilitiesMap);
  }

  @each $name, $options in $utilitiesMap {
    @if isMap($options) {
      $props: if(map-has-key($options, 'values'), oo('values', $options), ());
      $property-name: if(map-has-key($options, 'property'), oo('property', $options), toKebabCase($name));
      $prefix: if(map-has-key($options, 'prefix'), oo('prefix', $options), nth(split('-', toKebabCase($name)), 1));
      $is-important: if(map-has-key($options, 'important'), oo('important', $options), true);
      $screens: if(map-has-key($options, 'screens'), oo('screens', $options), ());
      
      @if not (str-slice(prefix, 1, 1) == '.') {
        $prefix: '.' + $prefix;
      }

      @include loop(
        $props,
        $property-name,
        $prefix,
        $is-important
      );

      @if isMap($screens) {
        @each $class, $props-name in $screens {
          @if isEmpty($props-name) {
            @include loopBreakpoints(
              $class,
              $props,
              $property-name,
              $prefix,
              $is-important
            )
          } @else {
            $props-name: toList($props-name);
            $props-target: ();
            @each $name in $props-name {
              $prop-value: oo(#{$name}, $props);
              @if $prop-value {
                $props-target: map-merge($props-target, ($name: $prop-value));
              }
            }
            @include loopBreakpoints(
              $class,
              $props-target,
              $property-name,
              $prefix,
              $is-important
            )
          }
        }
      } @else {
        @include loopBreakpoints(
          $screens,
          $props,
          $property-name,
          $prefix,
          $is-important
        );
      }
    }
  }
}