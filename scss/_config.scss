$ooLoop: (
  html5: true,
  
  breakpoints: (
    xs: 30em, // 480px
    sm: 37.500em, // 600px
    md: 60em, // 960px
    lg: 80em, // 1280px
    xl: 120em, // 1980px
  ),

  screens: (sm, md, lg),

  palette: (
    'primary': #0ea7d6,
    'secondary': #959595,
  ),

  root: (
    fontSize: 62.5%,
    smoothing: true,
  ),

  body: (
    props: (
      fontFamily: ('Helvetica Neue', 'Helvetica', 'Arial', sans-serif),
      fontSize: 1.6em, //16px
      lineHeight: 1.375,
      color: #2c444c,
    )
  ),

  headings: (
    props: (
      marginTop: .67em,
      marginBottom: .45em,
      lineHeight: 1.125,
    ),
    sizes: (
      h1: 3.2rem,
      h2: 2.6rem,
      h3: 2.2rem,
      h4: 1.8rem,
      h5: 1.6rem,
      h6: 1.4rem,
    ),
    classes: (),
  ),

  paragraph: (
    props: (
      marginTop: .5em,
      marginBottom: 1.125em,
    )
  ),

  anchor: (
    props: (
      color: this('palette.primary'),
      textDecoration: none,
    ),
    states: (
      hover: (
        color: ooDarken(this('anchor.props.color'), 12%),
      ),
      focus: this('anchor.states.hover'),
    )
  ),

  list: (
    props: (
      marginTop: .5em,
      marginBottom: 1.125em,
      paddingLeft: 1.1em,
    ),
    inlineSpacing: 1em,
  ),

  hr: (
    props:(
      margin: 1rem auto,
      borderBottom: 1px solid #cdcdcd,
    )
  ),

  // Utility format
  color: (
    font: (
      prefix: 'color',
      property: 'color',
      values: this('palette'),
    ),
    background: (
      prefix: 'bg',
      property: 'background-color',
      values: this('palette'),
    ),
    border: (
      property: 'border-color',
      values: (),
    ),
  ),

  // Utility format
  text: (
    fontSize: (
      prefix: 'text',
      values: (
        'large': 2rem,
        'small': 1.4rem,
      ),
    ),
    fontStyle: (
      values: 'italic',
    ),
    fontWeight: (
      values: (
        'bold': 700,
      ),
    ),
    textAlign: (
      values: (
        'left',
        'right',
        'center',
      )
    ),
    textTransform: (
      values: (
        'uppercase',
      ),
    ),
  ),

  // Utility format
  float: (
    values: (
      'left',
      'right',
    ),
    clearfix: true,
  ),

  // Utility format
  wrapper: (
    property: 'padding',
    values: (
      'small': 1.6rem,
      'medium': 2.4rem,
    ),
  ),

  // Utility format
  spacing: (
    left: (
      prefix: 'ml',
      property: 'margin-left',
      values: (
        '0': 0,
        '5': .5rem,
        '10': 1rem,
        '15': 1.5rem,
      ),
    ),
    right: (
      prefix: 'mr',
      property: 'margin-right',
      values: this('spacing.left.values'),
    ),
    top: (
      prefix: 'mt',
      property: 'margin-top',
      values: (
        '0': 0,
        '5': .5rem,
        '10': 1rem,
        '15': 1.5rem,
        '30': 3rem,
      ),
    ),
    bottom: (
      prefix: 'mb',
      property: 'margin-bottom',
      values: this('spacing.top.values'),
    ),
  ),

  visibility: (
    breakpoints: this('screens'),
    pointbreaks: this('screens'),
  ),

  container: (
    gutter: (
      rt: 1.6rem,
      sm: 2.4rem,
    ),
    maxWidth: 1280px,
  ),


  column: (
    system: 12,
    screens: this('screens'),
    gutter: (
      sizes: (
        default: this('container.gutter'),
        'less': 0,
      ),
      screens: (),
      vsizes: this('column.gutter.sizes'),
      vscreens: (),
    ),
    alignment: (
      screens: this('column.screens'),
    ),
    selfAlignment: (
      screens: this('column.screens'),
    ),
    fit: (
      screens: this('column.screens'),
    ),
    offset: (
      screens: this('column.screens'),
    ),
    order: (
      screens: this('column.screens'),
    ),
  ),

  template: (
    areas: (),
    gap: (
      sizes: (),
      screens: (),
      vsizes: (),
      vscreens: (),
    ),
  ),

  /// @todo Grid component
  // grid: (
  //   system: this('column.system'),
  //   gap: this('column.gutter'),
  //   use: (
  //     order: true,
  //   )
  // ),

  button: (
    props: (
      padding: .438em 1.2em,
      fontSize: 1.4rem,
      fontWeight: bold,
      lineHeight: 1.5,
      color: #333,
      backgroundColor: #fff,
      border: 1px solid #cecece,
      borderRadius: .2em,
    ),
    states: (
      hover: (
        color: #333,
        backgroundColor: ooDarken(this('button.props.backgroundColor'), 10%),
      ),
      focus: (
        _this('button.states.hover'),
        (
          outline: none,
        )
      ),
      active: (
        backgroundColor: ooDarken(this('button.props.backgroundColor'), 12%),
        boxShadow: inset 1px 1px 1px 0 ooDarken(this('button.props.backgroundColor'), 25%),
      ),
    ),
    colors: this('palette'),
    outline: true,
    variants: (
      'full': (
        width: 100%,
      ),
    )
  ),

  label: (
    props: (
      marginBottom: .3rem,
      display: inline-block,
      fontWeight: 500,
      lineHeight: 1.5
    )
  ),

  input: (
    props: (
      padding: .5em .625em,
      display: block,
      width: 100%,
      minHeight: 2.5em,
      color: #4d4d4d,
      fontSize: 1.6rem,
      lineHeight: 1.15,
      backgroundColor: #fff,
      border: 1px solid #d6d6d6,
      borderRadius: .2em,
    ),
    states: (
      focus: (
        outline: none,
        boxShadow: 0 0 8px 0 rgba(#aaa, .25),
      ),
    ),
    variants: (),
  ),
  select: (
    props: this('input.props'),
    states: this('input.states'),
    selector: (
      default: (
        size: 10px,
        weight: 2px,
        color: #4d4d4d,
        bgcolor: #fff, 
      ),
      variants: (),
    ),
    variants: (),
  ),
  checkbox: (
    props: (
      backgroundColor: #fff,
      border: 1px solid #d6d6d6,
      borderRadius: .2em,
      transition: background-color 250ms ease-out,
    ),
    checked: (
      markColor: #fff,
      props: (
        backgroundColor: #4d4d4d,
        border: 1px solid #4d4d4d,
      )
    ),
    sizes: (
      default: 1.8rem,
      variants: ()
    ),
    screens: (),
  ),
  radio: (
    props: (
      backgroundColor: #fff,
      border: 1px solid #d6d6d6,
    ),
    checked: (
      markColor: #fff,
      props: (
        backgroundColor: #4d4d4d,
        border: 1px solid #4d4d4d,
        transition: background-color 250ms ease-out,
      )
    ),
    sizes: (
      default: 1.8rem,
      variants: ()
    ),
    screens: (),
  ),
  toggle: (
    props: (
      border: 1px solid #d6d6d6,
      borderRadius: 50em,
      backgroundColor: #d6d6d6,
      transition: (background-color 300ms ease-in-out, border-color 300ms ease-in-out),
    ),
    toggler: (
      borderRadius: 50%,
      backgroundColor: #fff,
      boxShadow: 1px 1px 2px 0 rgba(#4d4d4d, 0.3),
      transition: transform 300ms ease-out,
    ),
    checked: (
      props: (
        borderColor: #4d4d4d,
        backgroundColor: this('toggle.checked.props.borderColor'),
      )
    ),
    sizes: (
      default: 2.4rem,
      variants: (),
    )
  ),

  utilities: (),
  components: (),
  misc: (
    responsive: (
      props: (
        maxWidth: 100%,
        height: auto,
      )
    ),
  ),

  use: (
    base: true,
    headings: true,
    type: true,
    button: true,
    
    input: (
      textfield: true,
      textarea: true,
      select: true,
      checkbox: true,
      radio: true,
      toggle: false,
    ),

    column: (
      system: true,
      fit: true,
      order: false,
      offset: false,
      alignment: true,
      selfAlignment: true,
      childAlignment: false,
    ),

    grid: false,
    template: true,
    container: true,
    visibility: true,
    misc: true,

    utilities: (
      color: true,
      float: true,
      list: true,
      spacing: true,
      text: true,
      wrapper: true,
    ),
  )
) !default;