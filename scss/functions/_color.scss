@use 'sass:color';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'empty';
@use 'type';
@use 'strip';

$colorPalette: (
  black,
  silver,
  gray,
  white,
  maroon,
  red,
  purple,
  fuchsia,
  green,
  lime,
  olive,
  yellow,
  navy,
  blue,
  teal,
  aqua,
  aliceblue,
  antiquewhite,
  aqua,
  aquamarine,
  azure,
  beige,
  bisque,
  black,
  blanchedalmond,
  blue,
  blueviolet,
  brown,
  burlywood,
  cadetblue,
  chartreuse,
  chocolate,
  coral,
  cornflowerblue,
  cornsilk,
  crimson,
  cyan,
  darkblue,
  darkcyan,
  darkgoldenrod,
  darkgray,
  darkgreen,
  darkgrey,
  darkkhaki,
  darkmagenta,
  darkolivegreen,
  darkorange,
  darkorchid,
  darkred,
  darksalmon,
  darkseagreen,
  darkslateblue,
  darkslategray,
  darkslategrey,
  darkturquoise,
  darkviolet,
  deeppink,
  deepskyblue,
  dimgray,
  dimgrey,
  dodgerblue,
  firebrick,
  floralwhite,
  forestgreen,
  fuchsia,
  gainsboro,
  ghostwhite,
  gold,
  goldenrod,
  gray,
  green,
  greenyellow,
  grey,
  honeydew,
  hotpink,
  indianred,
  indigo,
  ivory,
  khaki,
  lavender,
  lavenderblush,
  lawngreen,
  lemonchiffon,
  lightblue,
  lightcoral,
  lightcyan,
  lightgoldenrodyellow,
  lightgray,
  lightgreen,
  lightgrey,
  lightpink,
  lightsalmon,
  lightseagreen,
  lightskyblue,
  lightslategray,
  lightslategrey,
  lightsteelblue,
  lightyellow,
  lime,
  limegreen,
  linen,
  magenta,
  maroon,
  mediumaquamarine,
  mediumblue,
  mediumorchid,
  mediumpurple,
  mediumseagreen,
  mediumslateblue,
  mediumspringgreen,
  mediumturquoise,
  mediumvioletred,
  midnightblue,
  mintcream,
  mistyrose,
  moccasin,
  navajowhite,
  navy,
  oldlace,
  olive,
  olivedrab,
  orange,
  orangered,
  orchid,
  palegoldenrod,
  palegreen,
  paleturquoise,
  palevioletred,
  papayawhip,
  peachpuff,
  peru,
  pink,
  plum,
  powderblue,
  purple,
  red,
  rosybrown,
  royalblue,
  saddlebrown,
  salmon,
  sandybrown,
  seagreen,
  seashell,
  sienna,
  silver,
  skyblue,
  slateblue,
  slategray,
  slategrey,
  snow,
  springgreen,
  steelblue,
  tan,
  teal,
  thistle,
  tomato,
  turquoise,
  violet,
  wheat,
  white,
  whitesmoke,
  yellow,
  yellowgreen,
  transparent,
);

$hexValues: ('0', '1', '2', '3', '4' , '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');


/// toColor
/// @param string stringified color
/// @return color
///
/// @todo consider rgb, rgba, hls format

@function toColor($colorString) {
  @if empty.isEmpty($colorString) {
    @return $colorString;
  }

  @if type.isColor($colorString) {
    @return $colorString;
  }
  
  @if isHexColor($colorString) {
    $stringLength: string.length($colorString);
    $red: if(string.length($colorString) == 4, strip.stripSpaces(string.slice($colorString, 2, 2)string.slice($colorString, 2, 2)), string.slice($colorString, 2, 3));
    $green: if(string.length($colorString) == 4, strip.stripSpaces(string.slice($colorString, 3, 3)string.slice($colorString, 3, 3)), string.slice($colorString, 4, 5));
    $blue: if(string.length($colorString) == 4, strip.stripSpaces(string.slice($colorString, 4, 4)string.slice($colorString, 4, 4)), string.slice($colorString, 6, 7));
    
    $redDecimal: (list.index($hexValues, string.slice($red, 1,1)) - 1) * 16 + (list.index($hexValues, string.slice($red, 2,2)) - 1);
    $greenDecimal: (list.index($hexValues, string.slice($green, 1,1)) - 1) * 16 + (list.index($hexValues, string.slice($green, 2,2)) - 1);
    $blueDecimal: (list.index($hexValues, string.slice($blue, 1,1)) - 1) * 16 + (list.index($hexValues, string.slice($blue, 2,2)) - 1);
    @return rgb($redDecimal, $greenDecimal, $blueDecimal);
  }

  @each $colorItem in $colorPalette {
    @if string.to-lower-case($colorString) == string.to-lower-case(meta.inspect($colorItem)) {
      @return $colorItem; 
    }
  }
 
  @return $colorString;
}


/// isHexColor
/// @param string stringified color
/// @return boolean

@function isHexColor($colorString) {
  @if empty.isEmpty($colorString) {
    @return false;
  }

  @if string.slice($colorString, 1, 1) == '#'
    and (
      string.length($colorString) == 4
      or string.length($colorString) == 7
  ) {
    @return true;
  }
  @return false;
}


/// Is Bright
/// @param color
/// @param threshold range from 0 to 255, but more than the half (125)
/// @return bool

@function isBright($color, $threshold: 188) {
  @if type.isNotColor($color) {
    @return false;
  }

  $red: color.channel($color, 'red', $space: rgb);
  $green: color.channel($color, 'green', $space: rgb);
  $blue: color.channel($color, 'blue', $space: rgb);

  @if (math.div(($red * 299) + ($green * 587) + ($blue * 114), 1000)) >= $threshold {
    @return true;
  }
  @return false;
}
