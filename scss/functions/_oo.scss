@import 'empty';
@import 'map';
@import 'split';
@import 'type';
@import 'replace';

/**
 * hasRef
 * Check if a map has a ooFormat
 * @param map|string
 * @return boolean
 */
 @function hasRef($search) {
  @return if(str-index(#{$search}, 'oo(') == null, false, true);
}

/**
 * isRef
 * Check if a string is a ooFormat
 * @param string  $string
 * @return boolean
 */
@function isRef($string) {
  @if isNotString($string) {
    $string: #{$string};
  }
  @return str-slice($string, 1, 3) == 'oo(' and str-slice($string, str-length($string)) == ')';
}

/**
 * getRefValue
 * get the ooFormat reference
 * @param string  $string
 * @return string
 */
 @function getRefValue($string) {
  @if isNotString($string) {
    $string: #{$string};
  }
  @return str-slice($string, 4, -2);
}

/**
 * extractRef
 * extract the ooFormat reference from a string
 * @param string  $string
 * @return string
 */
@function extractRef($string) {
  @if not hasRef($string) {
    @return $string;
  }

  $start: str-index(#{$string}, 'oo(');
  $length: str-length($string);
  $end: null;

  @for $i from $start through $length {
    @if str-slice($string, $i, $i) == ')' {
      $end: $i;
      @return str-slice($string, $start, $end);
    }
  }

  @return $string;
}

/**
 * oo
 * Get value from a map with the ooFormat (default $ooLoop)
 * @param string  $key  ooFormat key
 * @param ?map $map the map to update (default $ooLoop)
 * @return map|list|string
 */
@function oo($key, $map:null) {
  $list: split('.', $key);
  $map: if($map == null, $ooLoop, $map);
  @for $i from 1 through length($list) {
    $map: getMapValue($map, nth($list, $i));
  }
  @return $map;
}

/**
 * ooSet
 * Set value in  to map with the ooFormat (default $ooLoop)
 * @param string  $key  ooFormat key
 * @param map|list|string  $value  the new value to set
 * @param ?map $map the map to update (default $ooLoop)
 * @return map|list|string
 */
@function ooSet($key, $value, $map:null) {
  $list: split('.', $key);
  $map:  if($map == null, $ooLoop, $map);
  
  @if length($list) > 1 {
    $mapValue: $value;
    @for $i from 1 through length($list) {
      $mapValue: ( #{nth($list, length($list) - $i + 1)} : $mapValue );
    }
    $map: mapMergeDeep($map, $mapValue);
  } @else if isRef($value) {
    $ooRefVal: oo(getRefValue($value), $map);
    $mapValue: ooSet($key, $ooRefVal, $map);
    $map: mapMergeDeep($map, $mapValue);
  } @else {
    $map: setMapValue($map, $key, $value);
  }

  @return $map;
}

/**
 * ooAdd
 * Push new map value to an another set of map with the ooFormat (default $ooLoop)
 * @param string $key ooFormat key
 * @param map $mapValue the value to add
 * @param ?map $map the map to update (default $ooLoop)
 * @return map
 */
@function ooAdd($key, $mapValue, $map:null) {
  $currentValue: oo($key, $map);

  @if (isRef($currentValue)) {
    $currentValue: oo(getRefValue($currentValue), $map);
  }
  $newValue: ooSet($key, mapMergeDeep($currentValue, $mapValue), $map);

  @return $newValue;
}


/**
 * ooParse
 * Parse a map of data with potential ooReference within (at this stage the oo() does not exist
 * @param map  $map
 * @param map  $backup the backupMap to refer to when getting data in a nested map
 * @param string  $path  a ooPathFormat to keep in mind where we are in a nested map
 * @return map
 */
@function ooParse($map, $backup:null, $path:'') {
  $parentMap: if($backup == null, $map, $backup);
  
  @each $key, $value in $map {
    @if isMap($value) {
      // set path to remember where we can from in a nested environment
      $path: if(isEmpty($path), '#{$key}', '#{$path}.#{$key}');
      $newValue: ooParse($value, $parentMap, $path);
      $map: setMapValue($map, $key, $newValue);
      // clear latest child in path to go backup in the nested environment 
      $path: if(length(split('.', $path)) > 1, replace('.#{$key}', '', $path), replace('#{$key}', '', $path));
    } 
    @else if hasRef($value) {
      $ooRef: extractRef($value);
      $ooRefVal: oo(getRefValue($ooRef), $parentMap);
      @if not isRef($value) {
        @debug $value;
      }
      $map: ooSet($key, $ooRefVal, $map);

      //update backup
      @if (isEmpty($path)) {
        $parentMap: mapMergeDeep($parentMap, $map);
      } @else {
        $parentMap: ooSet($path, $map, $parentMap);
      }
    }
  }
  @return $map;
}

/** 
 * ooPrefix
 * get loop prefix
 * @return string
 */
@function ooPrefix() {
  @return if(oo(html5) == true, 'data-oo', 'oo');
}

/** 
 * ooDarken
 * darken before init
 * @return string
 */
 @function ooDarken($value, $percentage) {
  @return darken($value, $percentage);
}

// @function ooAliasFunction($) {

// }
