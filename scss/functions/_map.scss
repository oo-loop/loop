@use 'sass:list';
@use 'sass:map';
@use 'sass:string';
@use 'type';
@use 'split';

/// getMapValue
/// @param map $map map of data
/// @param string $key key to retrieve the value from
/// @return string

@function getMapValue($map, $key) {
  @if type.isNotMap($map) {
    @return null;
  }
  @if map.has-key($map, $key) == false {
    // @warn 'key does not exist when using getMapValue() for' #{$key} 'on' $map;
    @return null;
  }
  @return map.get($map, $key);
}

/// setMapValue
/// @param map $map  map of data
/// @param string $key key to retrieve the value from
/// @return string

@function setMapValue($map, $key, $value) {
  $newSet: ($key: $value);
  @return map.merge($map, $newSet);
}

/// toMap [w.i.p]
/// Convert a stringified map to a map format
/// @param string $string Stringified map
/// @return map

/// @todo consider type change
/// @todo consider nested map

@function toMap($string) {
  @if type.isMap($string) {
    @return $string;
  }
  $map: ();
  $stripParenthesis: string.slice($string, 2, string.length($string) - 1);
  $list: fn.splitDeep(',', $stripParenthesis);
  @each $item in $list {
    $itemList: fn.splitDeep(':', $item);
    $map: setMapValue($map, list.nth($itemList, 1), list.nth($itemList, 2));
  }
  @return $map;
}
