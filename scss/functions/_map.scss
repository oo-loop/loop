@import 'type';
@import 'split';

/**
 * getMapValue
 * @param Map $map map of data
 * @param String $key key to retrieve the value from
 * @return String
 */
@function getMapValue($map, $key) {
  @if isNotMap($map) {
    @return null;
  }
  @if map-has-key($map, $key) == false {
    // @warn 'key does not exist when using getMapValue() for' #{$key} 'on' $map;
    @return null;
  }
  @return map-get($map, $key);
}


/**
 * mapMergeDeep
 * Non destructive map merge. 
 * @credit-to  https://gist.github.com/pentzzsolt

 * @param Map $parentMap Map of data to be merged into
 * @param Map $childMap  The set of data
 * @return Map
 */
@function mapMergeDeep($parentMap, $childMap) {
  $map: $parentMap;
  @if not isMap($map) {
    @return $map;
  }
  @each $key, $value in $childMap {
    @if (not map-has-key($map, $key)) or (type-of(map-get($map, $key) ) != type-of($value)) or (not (isMap(map-get($map, $key)) and isMap($value))) {
      $map: map-merge($map, ($key: $value));
    } @else {
      $map: map-merge($map, ($key: mapMergeDeep(map-get($map, $key), $value)));
    }
  }
  @return $map;
}


/**
 * getMapValue
 * @param Map $map  map of data
 * @param String $key key to retrieve the value from
 * @return string
 */
@function setMapValue($map, $key, $value) {
  $newSet: ($key: $value);
  @return map-merge($map, $newSet);
}

/**
 * toMap
 * Convert a stringified map to a map format
 *
 * @param String $string Stringified map
 * @return Map
 *
 * @todo consider nested map
 */
@function toMap($string) {
  @if isMap($string) {
    @return $string;
  }
  $map: ();
  $stripParenthesis: str-slice($string, 2, str-length($string) - 1);
  $list: split(',', $stripParenthesis);
  @each $item in $list {
    $itemList: split(':', $item);
    $map: setMapValue($map, nth($itemList, 1), nth($itemList, 2));
  }
  @return $map;
}
