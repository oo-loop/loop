@use 'sass:string';

/// getMapValue
/// @param map $map map of data
/// @param string $key key to retrieve the value from
/// @return string

@function getMapValue($map, $key) {
  @if isNotMap($map) {
    @return null;
  }
  @if map-has-key($map, $key) == false {
    // @warn 'key does not exist when using getMapValue() for' #{$key} 'on' $map;
    @return null;
  }
  @return map-get($map, $key);
}



/// mapMergeDeep
/// Non destructive map merge. 
/// @credit-to  https://gist.github.com/pentzzsolt
/// @param map $parentMap Map of data to be merged into
/// @param map $childMap The set of data
/// @param map $refMap The base map to refer too, usually equivalent to the $ooLoop before going into nested merge
/// @param bool $forceKebab force the use of kebab-case property
/// @return map

@function mapMergeDeep($parentMap, $childMap, $refMap:null, $forceKebab: false) {
  $map: $parentMap;
  @if not isMap($map) {
    @return $map;
  }

  $refMap: if($refMap == null, $ooLoop, $refMap);

  @each $key, $value in $childMap {
    $key: if($forceKebab, toKebabCase($key), $key);
    @if isRef(map-get($map, $key)) {
      $mapValue: getRefValue(map-get($map, $key), $refMap);
      $map: map-merge($map, ($key: $mapValue));
    }
    @if (not map-has-key($map, $key)) or (type-of(map-get($map, $key) ) != type-of($value)) or (not (isMap(map-get($map, $key)) and isMap($value))) {
      $map: map-merge($map, ($key: $value));
    } @else {
      $map: map-merge($map, ($key: mapMergeDeep(map-get($map, $key), $value, $refMap, inList($key, ('props', 'states')))));
    }
  }
  @return $map;
}


/// setMapValue
/// @param map $map  map of data
/// @param string $key key to retrieve the value from
/// @return string

@function setMapValue($map, $key, $value) {
  $newSet: ($key: $value);
  @return map-merge($map, $newSet);
}

/// toMap [w.i.p]
/// Convert a stringified map to a map format
/// @param string $string Stringified map
/// @return map

/// @todo consider type change
/// @todo consider nested map

@function toMap($string) {
  @if isMap($string) {
    @return $string;
  }
  $map: ();
  $stripParenthesis: str-slice($string, 2, str-length($string) - 1);
  $list: string.split(',', $stripParenthesis);
  @each $item in $list {
    $itemList: string.split(':', $item);
    $map: setMapValue($map, nth($itemList, 1), nth($itemList, 2));
  }
  @return $map;
}
