@import 'type';

/**
 * getMapValue
 * @param $map  map  map of data
 * @param $key  string  key to retrieve the value from
 * @return string
 */
@function getMapValue($map, $key) {
  @if map-has-key($map, $key) == false {
    @warn 'key does not exist when using getMapValue() for' #{$key} 'on' $map;
    @return '';
  }
  @return map-get($map, $key);
}


/**
 * mapMergeDeep
 * Non destructive map merge. 
 * @credit-to  https://gist.github.com/pentzzsolt

 * @param $parentMap  map  map of data to be merged into
 * @param $childMap  map  the set of data
 * @return map
 */
@function mapMergeDeep($parentMap, $childMap) {
  $map: $parentMap;
  @each $key, $value in $childMap {
    @if (not map-has-key($map, $key)) or (type-of(map-get($map, $key) ) != type-of($value)) or (not (isMap(map-get($map, $key)) and isMap($value))) {
      $map: map-merge($map, ($key: $value));
    } @else {
      $map: map-merge($map, ($key: mapMergeDeep(map-get($map, $key), $value)));
    }
  }
  @return $map;
}


/**
 * getMapValue
 * @param $map  map  map of data
 * @param $key  string  key to retrieve the value from
 * @return string
 */
@function setMapValue($map, $key, $value) {
  $newSet: ($key: $value);
  @return map-merge($map, $newSet);
}

/**
 * getColors
 * Get value from the map variable $colors
 * @param $key  string  key to retrieve the value from
 * @return string
 */
@function getColors($key) {
  @return getMapValue($colors, $key);
}

/**
 * getTextColors
 * Get value from the map variable $text-colors
 * @param $key  string  key to retrieve the value from
 * @return string
 */
@function getTextColors($key) {
  @return getMapValue($text-colors, $key);
}

/**
 * getBgColors
 * Get value from the map variable $bg-colors
 * @param $key  string  key to retrieve the value from
 * @return string
 */
@function getBgColors($key) {
  @return getMapValue($bg-colors, $key);
}

/**
 * getBorderColors
 * Get value from the map variable $border-colors
 * @param $key  string  key to retrieve the value from
 * @return string
 */
@function getBorderColors($key) {
  @return getMapValue($border-colors, $key);
}

/**
 * getTextSizes
 * Get value from the map variable $text-sizes
 * @param $key  string  key to retrieve the value from
 * @return string
 */
@function getTextSizes($key) {
  @return getMapValue($text-sizes, $key);
}