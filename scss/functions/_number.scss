@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';

/// toNumber
/// convert a string to number
/// @credit-to Hugo Giraudel https://www.sassmeister.com/gist/9fa19d254864f33d4a80
/// @param string $string value to be parsed
/// @return number

@function toNumber($value) {
  @if meta.type-of($value) == 'number' {
    @return $value;
  } @else if meta.type-of($value) != 'string' {
    @warn('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: string.slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through string.length($value) {
    $character: string.slice($value, $i, $i);
    
    @if not (list.index(map.keys($numbers), $character) or $character == '.') {
      @return toLength(if($minus, -$result, $result), string.slice($value, $i));
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map.get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map.get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}


/// toLength
/// Add unit to a value
/// @credit-to Hugo Giraudel

/// @param number $value Value to add unit to
/// @param string $unit String representation of the unit 
/// @return number number with unit

@function toLength($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
  @if not list.index(map.keys($units), $unit) {
    @warn 'Invalid unit `#{$unit}`.';
  }
  @return $value * map.get($units, $unit);
}