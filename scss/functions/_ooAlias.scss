$ooAlias: (
  (
    name: 'ooDarken',
    function: 'darken',
    paramType: ('color', 'number'),
  ),
  (
    name: 'ooLighten',
    function: 'lighten',
    paramType: ('color', 'number'),
  ),
);


// Aliases function used before init

@function ooDarken($value, $percentage) {
  @if isNotColor($value) {
    @return $value;
  }
  @return darken($value, $percentage);
}
@function ooLighten($value, $percentage) {
  @if isNotColor($value) {
    @return $value;
  }
  @return lighten($value, $percentage);
}

/// isAlias
/// check if a string is a sass alias function
/// @param string $string the string to check
/// @return bool

@function isAlias($string) {
  @if isNotString($string) {
    @return false;
  }

  $isAlias: false;
  @each $alias in $ooAlias {
    $aliasName: getMapValue($alias, 'name');
    $aliasLength: str-length($aliasName);
    @if str-slice(#{$string}, 1, $aliasLength + 1) == '#{$aliasName}(' and str-slice(#{$string}, str-length(#{$string})) == ')' {
      $isAlias: true;
    }
  }
  @return $isAlias;
}

/// getAliasInfo
/// retrieve the alias information
/// @param string $aliasFunction The complete alias function
/// @return map|null

@function getAliasInfo($aliasFunction) {
  @each $alias in $ooAlias {
    $aliasName: getMapValue($alias, 'name');
    $aliasLength: str-length($aliasName);
    $aliasFunctionName: stripSpaces(str-slice($aliasFunction, 1, $aliasLength));

    @if $aliasFunctionName == $aliasName {
      $currentAlias: $alias;
      $functionName: getMapValue($alias, 'function');

      @return (
        name: $aliasName,
        nameLength: $aliasLength,
        function: if(function-exists('get-function'), get-function($functionName), $functionName),
        functionName: $functionName,
        paramType: getMapValue($alias, 'paramType'),
      );
    }
  }

  @return null;
}

/// getAliasValue
/// retrieve the value of an alias function
/// @param string $aliasFunction The complete alias function
/// @param string $value Value of the 1st parameter
/// @return bool

@function getAliasValue($aliasFunction, $value:null) {
  $name: null;
  $paramType: null;
  $function: null;
  $params: split(',', inspect($aliasFunction));
  $param1: nth($params, 1);

  $aliasInfo: getAliasInfo($aliasFunction);

  @if $aliasInfo != null {
    $name: getMapValue($aliasInfo, 'name');
    $function: getMapValue($aliasInfo, 'function');
    $paramType: getMapValue($aliasInfo, 'paramType');
    $param1: stripSpaces(str-slice($param1, getMapValue($aliasInfo, 'nameLength') + 2, str-length($param1)));
  }

  $param1: if($value==null, $param1, $value);

  @if length($params) > 1 {
    $param2: stripSpaces(str-slice(#{nth($params, 2)}, 1, -2));

    $param1Type: null;
    $param2Type: null;

    @if $paramType != null {
      $param1Type: nth($paramType, 1);
      $param2Type: nth($paramType, 2);
    }

    $param1: toType($param1Type, $param1);
    $param2: toType($param2Type, $param2);
 
    @if type-of($param1) != $param1Type or type-of($param2) != $param2Type {
      @warn('The alias `#{$aliasFunction}` is targetting `#{$value}` and therefore cannot be used with the sass function `#{getMapValue($aliasInfo, 'functionName')}`');
      @return $value;
    }

    @return call($function, $param1, $param2);
  }

  @return call($function, $param1);
}