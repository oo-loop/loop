@use 'sass:string';

/// hasRef
/// Check if a map has a ooFormat
/// @param mixed
/// @return bool

@function hasRef($search) {
  @if isNotString($search) {
    $search: inspect($search);
  }
  @return if(str-index($search, 'this(') == null, false, true);
}


/// isRef
/// Check if a string is a ooFormat
/// @param string $string
/// @return bool

@function isRef($string) {
  @if isNotString($string) {
    $string: inspect($string);
  }
  @return str-slice($string, 1, 5) == 'this(' and str-slice($string, str-length($string)) == ')';
}

/// hasSpreadOperator
/// Check if a reference has the spread operator  
/// @param string  $ref
/// @return bool

@function hasSpreadOperator($ref) {
  @if isNotString($ref) {
    $ref: inspect($ref);
  }
  @return if(str-index($ref, '_this(') == null, false, true);
}

/// getRefPath
/// get the ooFormat reference path
/// @param string $string
/// @return String

@function getRefPath($string) {
  @if isNotString($string) {
    $string: inspect($string);
  }
  @return str-slice($string, 6, -2);
}

/// getRefValue
/// Retrieve the value of a reference
/// @param string $ref the reference
/// @param map $map the map look through
/// @return mixed

@function getRefValue($ref, $map) {
  $value: oo(getRefPath($ref), $map);
  @if isRef($value) {
    $value: getRefValue($value, $map);
  }
  @return $value;
}

/// getSpreadMap
/// Return the map built by the spreads 
/// @param list $list the list creating the map
/// @param map $map the map look through
/// @return map

@function getSpreadMap($list, $map) {
  @if isNotList($list) {
    @error 'spread operator must be used within a list';
  }
  $newMapValue: ();
  @for $i from 1 through length($list) {
    @if hasSpreadOperator(nth($list, $i)) {
      $ref: extractRef(nth($list, $i));
      $refValue: getRefValue($ref, $map);
      @if hasSpreadOperator($refValue) {
        $refValue: getSpreadMap($refValue, $map);
      }
      @if isNotMap($refValue) {
        //the use of replace is for some sass version
        $refPathList: string.split('.', replace('"', '', getRefPath($ref)));
        $refValue: (nth($refPathList, length($refPathList)): $refValue);
      }
      $newMapValue: map-merge($newMapValue, $refValue);
    } @else if isNotMap(nth($list, $i)) {
      @error 'spread operator only works along map';
    } @else {
      $newMapValue: map-merge($newMapValue, nth($list, $i));
    }
  }
  @return $newMapValue;
}

/// extractRef
/// extract the ooFormat reference from a string
/// @param string  $string The string to extract the ref from
/// @return string

@function extractRef($string) {
  @if isNotString($string) {
    $string: inspect($string)
  }
  @if not hasRef($string) {
    @return $string;
  }
  $extractString: extract('this(', ')', $string);
  @return $extractString;
}