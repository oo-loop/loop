/**
 * ooSet
 * Set value in to map with the ooFormat (default $ooLoop)
 * @param string $key  ooFormat key
 * @param mixed  $value  the new value to set
 * @param bool   $hard  is the hard mode (destructive) or soft (non destructive)
 * @param map|null $map the map to update (default $ooLoop)
 * @return mixed
 */
@function ooSet($key, $value, $hard:true, $map:null) {
  $map: if($hard, ooSetHard($key, $value, $map), ooSetSoft($key, $value, $map));
  @return $map;
}

@function ooSetSoft($key, $value, $map:null) {
  $list: split('.', $key);
  $map:  if($map == null, $ooLoop, $map);
  
  @if isRef($value) {
    $value: getRefValue($value, $map);
  }
  
  @if length($list) > 1 {
    $mapValue: $value;
    @for $i from 1 through length($list) {
      $mapValue: ( #{nth($list, length($list) - $i + 1)} : $mapValue );
    }
    $map: mapMergeDeep($map, $mapValue);
  } @else {
    $map: mapMergeDeep($map, (#{$key}: $value));
  }
  
  @return $map;
}

@function ooSetHard($key, $value, $map:null) {
  $list: split('.', $key);
  $map:  if($map == null, $ooLoop, $map);

  @if isRef($value) {
    $value: getRefValue($value, $map);
  }

  @if length($list) > 1 {
    $key: replace("#{nth($list , 1)}.", '', $key);
    $mapValue: getMapValue($map, nth($list , 1));

    @if ($mapValue == null) {
      $mapValue: ();
    }

    $map: map-merge(
      $map,
      (
        nth($list, 1): map-merge(
          $mapValue, 
          ooSetHard($key, $value, $mapValue)
        ),
      )
    );
  } @else {
    $map: ($key: $value); 
  }

  @return $map;
}

/**
 * ooSetHeadings
 * Set value for headings on $ooLoop
 * @param string $key ooFormat key
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetHeadings($key, $value) {
  $key: stripSpaces(#{'headings.'$key});
  @return ooSet($key, $value);
}

/**
 * ooSetAnchor
 * Set value for anchor on $ooLoop
 * @param string $key ooFormat key
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetAnchor($key, $value) {
  $key: stripSpaces(#{'anchor.'$key});
  @return ooSet($key, $value);
}

/**
 * ooPaintFont
 * Set value for font's paint on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooPaintFont($value) {
  @return ooSet('paint.font.values', $value);
}

/**
 * ooPaintBg
 * Set value for background's paint on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooPaintBg($value) {
  @return ooSet('paint.background.values', $value);
}

/**
 * ooPaintBorder
 * Set value for border's paint on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooPaintBorder($value) {
  @return ooSet('paint.border.values', $value);
}

/**
 * ooSetFontSize
 * Set value for fontSize on $ooLoop
 * @param string $key ooFormat key
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetFontSize($key, $value) {
  $key: stripSpaces(#{'text.fontSize.'$key});
  @return ooSet($key, $value);
}

/**
 * ooSetFontStyle
 * Set value for fontStyle on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetFontStyle($value) {
  @return ooSet('text.fontStyle.values', $value);
}

/**
 * ooSetFontWeight
 * Set value for fontWeight on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetFontWeight($value) {
  @return ooSet('text.fontWeight.values', $value);
}

/**
 * ooSetTextAlign
 * Set value for textAlign on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetTextAlign($value) {
  @return ooSet('text.textAlign.values', $value);
}

/**
 * ooSetTextTransform
 * Set value for textTransform on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetTextTransform($value) {
  @return ooSet('text.textTransform.values', $value);
}

/**
 * ooSetFloat
 * Set value for float on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetFloat($value) {
  @return ooSet('float.values', $value);
}
