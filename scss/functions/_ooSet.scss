/// ooSet
/// Set value in to map with the ooFormat (default $ooLoop)
/// @param string $key  ooFormat key
/// @param mixed  $value  the new value to set
/// @param bool   $hard  is the hard mode (destructive) or soft (non destructive)
/// @param map|null $map the map to update (default $ooLoop)
/// @return mixed

@function ooSet($key, $value, $hard:true, $map:null) {
  $map: if($hard, ooSetHard($key, $value, $map), ooSetSoft($key, $value, $map));
  @return $map;
}

@function ooSetSoft($key, $value, $map:null) {
  $list: split('.', $key);
  $map:  if($map == null, $ooLoop, $map);
  
  @if isRef($value) {
    $value: getRefValue($value, $map);
  }
  
  @if length($list) > 1 {
    $mapValue: $value;
    @for $i from 1 through length($list) {
      $mapValue: ( #{nth($list, length($list) - $i + 1)} : $mapValue );
    }
    $map: mapMergeDeep($map, $mapValue);
  } @else {
    $map: mapMergeDeep($map, (#{$key}: $value));
  }
  
  @return $map;
}

@function ooSetHard($key, $value, $map:null) {
  $list: split('.', $key);
  $map:  if($map == null, $ooLoop, $map);

  @if isRef($value) {
    $value: getRefValue($value, $map);
  }

  @if length($list) > 1 {
    $key: replace("#{nth($list , 1)}.", '', $key);
    $mapValue: getMapValue($map, nth($list , 1));

    @if ($mapValue == null) {
      $mapValue: ();
    }

    $map: map-merge(
      $map,
      (
        nth($list, 1): map-merge(
          $mapValue, 
          ooSetHard($key, $value, $mapValue)
        ),
      )
    );
  } @else {
    $map: map-merge($map, ($key: $value));
  }

  @return $map;
}