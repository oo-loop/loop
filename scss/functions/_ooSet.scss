/**
 * ooSet
 * Set value in to map with the ooFormat (default $ooLoop)
 * @param string $key  ooFormat key
 * @param mixed  $value  the new value to set
 * @param map|null $map the map to update (default $ooLoop)
 * @return mixed
 */
 @function ooSet($key, $value, $map:null) {
  $list: split('.', $key);
  $map:  if($map == null, $ooLoop, $map);
  
  @if length($list) > 1 {
    $mapValue: $value;
    @for $i from 1 through length($list) {
      $mapValue: ( #{nth($list, length($list) - $i + 1)} : $mapValue );
    }
    $map: mapMergeDeep($map, $mapValue);
  } @else if isRef($value) {
    $ooRefVal: oo(getRefValue($value), $map);
    $mapValue: ooSet($key, $ooRefVal, $map);
    $map: mapMergeDeep($map, $mapValue);
  } @else {
    $map: setMapValue($map, $key, $value);
  }

  @return $map;
}

/**
 * ooSetHeadings
 * Set value for headings on $ooLoop
 * @param string $key ooFormat key
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetHeadings($key, $value) {
  $key: stripSpaces(#{'headings.'$key});
  @return ooSet($key, $value);
}

/**
 * ooSetAnchor
 * Set value for anchor on $ooLoop
 * @param string $key ooFormat key
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetAnchor($key, $value) {
  $key: stripSpaces(#{'anchor.'$key});
  @return ooSet($key, $value);
}

/**
 * ooSetPaintFont
 * Set value for font's paint on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetPaintFont($value) {
  @return ooSet('paint.font.values', $value);
}

/**
 * ooSetPaintBg
 * Set value for background's paint on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetPaintBg($value) {
  @return ooSet('paint.background.values', $value);
}

/**
 * ooSetPaintBorder
 * Set value for border's paint on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetPaintBorder($value) {
  @return ooSet('paint.border.values', $value);
}

/**
 * ooSetFontSize
 * Set value for fontSize on $ooLoop
 * @param string $key ooFormat key
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetFontSize($key, $value) {
  $key: stripSpaces(#{'text.fontSize.'$key});
  @return ooSet($key, $value);
}

/**
 * ooSetFontStyle
 * Set value for fontStyle on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetFontStyle($value) {
  @return ooSet('text.fontStyle.values', $value);
}

/**
 * ooSetFontWeight
 * Set value for fontWeight on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetFontWeight($value) {
  @return ooSet('text.fontWeight.values', $value);
}

/**
 * ooSetTextAlign
 * Set value for textAlign on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetTextAlign($value) {
  @return ooSet('text.textAlign.values', $value);
}

/**
 * ooSetTextTransform
 * Set value for textTransform on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetTextTransform($value) {
  @return ooSet('text.textTransform.values', $value);
}

/**
 * ooSetFloat
 * Set value for float on $ooLoop
 * @param mixed  $value  the new value to set
 * @return $ooLoop
 */
@function ooSetFloat($value) {
  @return ooSet('float.values', $value);
}
