/**
 * Grid
 */

$use-grid-areas: true !default;
$use-grid-gap: true !default;
$use-v-grid-gap: true !default;
$use-grid-order: false !default;

$grid-gap: 	  $columns-gutter !default;
$grid-system: $columns-system !default;
$grid-areas: "headers header header header" "main main . sidebar" "footer footer footer footer" !default;

$grid-gap-sizes: $columns-gutter-sizes !default;
$grid-v-gap-sizes: $grid-gap-sizes !default;

[#{$loop-component-prefix}-grid~="layout"] {
	display: grid;
	grid-template-columns: repeat($grid-system, 1fr);
	grid-gap: $grid-gap;
}

@each $class in $breakpoints-classes-width-default-value {
	@include breakpoint($class) {
		$suffix: '';
		@if $class != '' {
			$suffix: \@#{$class};
		}
		@for $i from 1 through $grid-system {
			[#{$loop-component-prefix}-grid~="col-#{$i}#{$suffix}"] { grid-column: span $i; }
			[#{$loop-component-prefix}-grid~="row-#{$i}#{$suffix}"] { grid-row: span $i; }
		}
	}
}

@if $use-grid-gap {
	@each $gap-name, $gap-size in $grid-gap-sizes {
		[#{$loop-component-prefix}-grid~="gap-#{$gap-name}"] { grid-gap: $gap-size; }
	}
}

@if $use-grid-gap and $use-v-grid-gap {
	@each $gap-name, $gap-size in $grid-v-gap-sizes {
		[#{$loop-component-prefix}-grid~="v-gap-#{$gap-name}"] { grid-row-gap: $gap-size; }
	}
}

@if $use-grid-order {
	@each $class in $breakpoints-classes {
	    @include breakpoint($class) {
	        $suffix: \@#{$class};
			// order-0 to make sure it is first
			[#{$loop-component-prefix}-grid~="order-0#{$suffix}"] { order: -1; }
			@for $i from 1 through $grid-system {
				[#{$loop-component-prefix}-grid~="order-#{$i}#{$suffix}"] { order: $i; }
			}
		}
	}
}


@if isNotEmpty($grid-areas) {

	$grid-areas-name: ();

	@each $area in $grid-areas {
		$areaNameList: split(' ', $area);
		@each $areaName in $areaNameList {
			@if index($grid-areas-name, $areaName) == null {
				$grid-areas-name: join($grid-areas-name, $areaName);
			}
		}
	}
	@debug $grid-areas-name;

	.areas {
		grid-template-areas: $grid-areas;
	}
}
