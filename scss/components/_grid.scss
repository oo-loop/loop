/**
 * Grid
 */

$use-grid-layout: true !default;
$use-grid-area:   true !default;
$use-grid-order:  false !default;
$use-grid-gap:    true !default;
$use-v-grid-gap:  true !default;

$grid-gap: 	  $columns-gutter !default;
$grid-system: $columns-system !default;
$grid-areas: "header header header header"
			 "main main main sidebar"
			 "footer footer footer footer" !default;

$grid-areas: (
	'page' : (
		: (
			"a a a"
			"b b b"
			"c c c"
		),
		sm: (
			"a a a"
			"c c b"
			"c c b"
		),
		md: (
			"a a a"
			"b c c"
			"b c c"
		),
		lg: (
			"b a a"
			"b c c"
			"b c c"
		),
	)
);

$grid-gap-sizes: $columns-gutter-sizes !default;
$grid-v-gap-sizes: $grid-gap-sizes !default;


// Grid layout
@if $use-grid-layout {
	[#{$loop-component-prefix}-grid~="layout"] {
		display: grid;
		grid-template-columns: repeat($grid-system, 1fr);
		grid-gap: $grid-gap;
	}

	@each $class in $breakpoints-classes-width-default-value {
		@include breakpoint($class) {
			$suffix: '';
			@if $class != '' {
				$suffix: \@#{$class};
			}
			@for $i from 1 through $grid-system {
				[#{$loop-component-prefix}-grid~="col-#{$i}#{$suffix}"] { grid-column: span $i; }
				[#{$loop-component-prefix}-grid~="row-#{$i}#{$suffix}"] { grid-row: span $i; }
			}
		}
	}

	@if $use-grid-order {
		@each $class in $breakpoints-classes {
		    @include breakpoint($class) {
		        $suffix: \@#{$class};
				// order-0 to make sure it is first
				[#{$loop-component-prefix}-grid~="order-0#{$suffix}"] { order: -1; }
				@for $i from 1 through $grid-system {
					[#{$loop-component-prefix}-grid~="order-#{$i}#{$suffix}"] { order: $i; }
				}
			}
		}
	}
}

// Grid Areas

@function getAreaNames($areas) {
	$list: ();
	@each $area in $areas {
		$areaNames: split(' ', $area);
		@each $areaName in $areaNames {
			@if notInList($areaName, $list) {
				$list: join($list, $areaName);
			}
		}
	}
	@return $list;
}

@if $use-grid-area and isNotEmpty($grid-areas) {

	[#{$loop-component-prefix}-grid~="area"] {
		display: grid;
		grid-gap: $grid-gap;
	}

	@if isList($grid-areas) {

		[#{$loop-component-prefix}-grid~="area"] {
			grid-template-areas: $grid-areas;
		}

		$areas: getAreaNames($grid-areas);
		@each $area in $areas {
			[#{$loop-component-prefix}-grid~="#{$area}"] {
				grid-area: #{$area};
			}
		}
	} @else if isMap($grid-areas) {
		@each $grid-name, $grid-map in $grid-areas {
			[#{$loop-component-prefix}-grid~="#{$grid-name}"] {;

				@each $breakpoint, $areas in $grid-map {
					@include breakpoint($breakpoint) {
						grid-template-areas: $areas;

						$areas: getAreaNames($areas);
						@each $area in $areas {
							[#{$loop-component-prefix}-grid~="#{$area}"] {
								grid-area: #{$area};
							}
						}
					}
				}
			}
		}
	}
}


// Grid Gap
@if $use-grid-gap {
	@each $gap-name, $gap-size in $grid-gap-sizes {
		[#{$loop-component-prefix}-grid~="gap-#{$gap-name}"] { grid-gap: $gap-size; }
	}
}
@if $use-grid-gap and $use-v-grid-gap {
	@each $gap-name, $gap-size in $grid-v-gap-sizes {
		[#{$loop-component-prefix}-grid~="v-gap-#{$gap-name}"] { grid-row-gap: $gap-size; }
	}
}
