/**
 * Radio
 */

@mixin radioSize($size) {
  @if isNotNumber($size) {
    @debug $size;
    @error 'The radio $size must be a number';
  }

  & + label {
    &::after {
      margin-right: $size / 2;
      min-width: $size;
      min-height: $size;
    }
    & + [#{ooPrefix()}-radio] + label {
      margin-top: $size / 3;
    }
  }

  &:checked + label::before {
    $halfSize: $size / 2;
    top: calc(50% - #{$halfSize});
    min-width: $size;
    min-height: $size;
    transform: scale(.4);
  }
}

@mixin Radio($param: null) {
  @include initElement('radio', $param);

  [#{ooPrefix()}-radio] {
    position: absolute;
    opacity: 0;
    pointer-events: none;

    & + label {
      position: relative;
      display: flex;
      align-items: center;
      width: fit-content;
      font-weight: inherit;
      line-height: 1.1;


      &::after {
        display: flex;
        order:-1;
        content:'';
        border-radius: 50%;
        @include generateProperties(oo('radio.props'));
      }
    }

    &:checked + label {
      &::before {
        position: absolute;
        top: 0;
        left: 0;
        content: '';
        border-radius: 50%;
        background-color: oo('radio.checked.markColor');
      }
      &::after {
        @include generateProperties(oo('radio.checked.props'));
      }
    }

    @include radioSize(oo('radio.sizes.default'));

    @if isNotEmpty(oo('radio.sizes.variants')) {
      @each $name, $size in oo('radio.sizes.variants') {
        &[#{ooPrefix()}-radio~="#{$name}"] {
          @include radioSize($size);
        }
      }

      @if isNotEmpty(oo('radio.screens')) {
        @each $breakpoint in oo('radio.screens') {
          @include breakpoint($breakpoint) {
            @each $name, $size in oo('radio.sizes.variants') {
              $suffix: \@#{$breakpoint};
              &[#{ooPrefix()}-radio~="#{$name}#{$suffix}"] {
                @include radioSize($size);
              }
            }
          }
        }
      }
    }

    @if (oo('colors.borders')) {
      @include loop(oo('colors.borders'), 'border-color', '&[class*="border', true, '"] + label::after');
    }
  }
}