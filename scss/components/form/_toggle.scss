// Toggle

@mixin toggleSize($size) {
  & + label {
    &::before {
      $toggler-size: $size * .7;
      top: calc(50% - (#{$toggler-size} / 2));
      min-width: $toggler-size;
      height: $toggler-size;
      transform: translate3d(($size * .2), 0, 0);
    }
    &::after {
      margin-right: $size / 2.5;
      min-width: $size * 1.8;
      min-height: $size;
    }

    & + [#{ooPrefix()}-toggle] + label {
      margin-top: ($size / 3);
    }
  }

  &:checked + label::before {
    transform: translate3d(calc(80% + (#{$size} * .35)), 0, 0);
  }
}

@mixin Toggle($param: null) {
  @include initElement('toggle', $param);

  [#{ooPrefix()}-toggle] {
    position: absolute;
    opacity: 0;
    pointer-events: none;

    & + label {
      position: relative;
      display: flex;
      align-items: center;
      width: fit-content;
      font-weight: inherit;
      line-height: 1.1;

      &::before {
        position: absolute;
        left: 0;
        content: '';
        @include generateProperties(oo('toggle.toggler'));
      }
      &::after {
        display: flex;
        order: -1;
        content:'';
        @include generateProperties(oo('toggle.props'));
      }
      &:empty::after {
        margin-right: 0 !important;
      }
    }

    &:checked + label::after {
      @include generateProperties(oo('toggle.checked.props'));
    }

    @if isMap(oo('toggle.sizes')) {
      @each $name, $size in oo('toggle.sizes') {
        @if $name == 'default' {
          @include toggleSize($size)
        } @else {
          &[#{ooPrefix()}-toggle~="#{$name}"] { @include toggleSize($size) }
        }
      }
    }
  }
}