/**
 * Toggle
 */

@mixin toggleSize($size) {
  & + label {
    &::before {
      min-width: $size * .7;
      height: $size * .7;
      transform: translate3d(($size * .2), 0, 0);
    }
    &::after {
      margin-right: $size / 2.5;
      min-width: $size * 1.8;
      min-height: $size;
    }

    & + [#{ooPrefix()}-toggle] + label {
      margin-top: ($size / 3);
    }
  }

  &:checked + label::before {
    transform: translate3d(calc(80% + (#{$size} * .35)), 0, 0);
  }
}

@mixin initToggle {
  [#{ooPrefix()}-toggle] {
    position: absolute;
    opacity: 0;
    pointer-events: none;

    & + label {
      position: relative;
      display: flex;
      align-items: center;
      width: fit-content;
      font-weight: inherit;
      line-height: 1.1;

      &::before {
        position: absolute;
        content: '';
        @include generateProperties(oo('toggle.toggler'));
      }
      &::after {
        display: flex;
        order: -1;
        content:'';
        @include generateProperties(oo('toggle.props'));
      }
      &:empty::after {
        margin-right: 0 !important;
      }
    }

    &:checked + label::after {
      @include generateProperties(oo('toggle.checked.props'));
    }

    @include toggleSize(oo('toggle.sizes.default'));

    @if isMap(oo('toggle.sizes.variants')) {
      @each $name, $value in oo('toggle.sizes.variants') {
        &[#{ooPrefix()}-toggle~="#{$name}"] { @include toggleSize($value) }
      }
    }
  }
}