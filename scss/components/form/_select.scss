/**
 * Select
 */

@mixin selectTheme($theme) {
  @if map-has-key($theme, 'size') {
    &::before { width: (map-get($theme, 'size') * 4); }
    &::after {
      right: map-get($theme, 'size') * 1.5;
      width: map-get($theme, 'size');
      height: map-get($theme, 'size');
    }
  }
  @if map-has-key($theme, 'weight') {
    &::after {
      border-bottom-width: map-get($theme, 'weight');
      border-right-width: map-get($theme, 'weight');
    }
  }
  @if map-has-key($theme, 'bgcolor') {
    &::before { background-color: map-get($theme, 'bgcolor'); }
  }
  @if map-has-key($theme, 'border') {
    &::before { 
      border-top: map-get($theme, 'border');
      border-right: map-get($theme, 'border');
      border-bottom: map-get($theme, 'border');
    }
  }
  @if map-has-key($theme, 'color') {
    &::after {
      border-bottom-color: map-get($theme, 'color');
      border-right-color: map-get($theme, 'color');
    }
  }
}

@mixin SelectField($param: null) {
  @include initElement('select', $param);

  [#{ooPrefix()}-select] {
    position: relative;
    display: block;
  
    &::before {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      content: '';
      
      $borderRadiusProps: if(oo('select.props.borderRadius'), oo('select.props.borderRadius'), oo('select.props.border-radius'));
      @if ($borderRadiusProps) {
        border-top-right-radius: $borderRadiusProps;
        border-bottom-right-radius: $borderRadiusProps;
      }
      pointer-events: none;
    }

    &::after {
      position: absolute;
      top: 50%;
      content: '';
      border-bottom-style: solid;
      border-right-style: solid;
      pointer-events: none;
      transform: rotateZ(45deg) translateY(-50%) translateX(-50%);
    }

    @if oo('select.selector') {
      @include selectTheme(oo('select.selector'));
    }

    > select {
      margin: 0;
      -webkit-appearance: none;
      -moz-appearance: none;
      &::-ms-expand { // hide the default arrow in ie10 and ie11
        display: none;
      }

      @if oo('select.props') == oo('input.props') and inList('input', 'include') {
        @extend [#{ooPrefix()}-input];
      } @else {
        @include generateProperties(oo('select.props'));
        @include generateStatesProperties(oo('select.states'));
      }
    }

    &[class*="color-"] {
      > select { color: inherit !important; }
    }
    &[class*="bg-"] {
      > select { background-color: inherit !important; }
    }
    &[class*="border-"] {
      > select,
      &::before {
        border-color: inherit !important;
      }
    }
  }

  @if oo('select.variants') and isMap(oo('select.variants')) {
    @each $name, $props in oo('select.variants') {

      [#{ooPrefix()}-select~="#{$name}"] {
        /**
        * @todo Think about a clever way to apply all those exceptions to the selector
        */
        @if map-has-key($props, 'background-color') {
          &::before {
            background-color: map-get($props, 'background-color');
          }
        } @else if map-has-key($props, 'backgroundColor') {
          &::before {
            background-color: map-get($props, 'backgroundColor');
          }
        }
        @if map-has-key($props, 'border-color') {
          &::before {
            border-color: map-get($props, 'border-color');
          }
        } @else if map-has-key($props, 'borderColor') {
          &::before {
            background-color: map-get($props, 'borderColor');
          }
        }
        @if map-has-key($props, 'border-radius') {
          &::before {
            border-top-right-radius: map-get($props, 'border-radius');
            border-bottom-right-radius: map-get($props, 'border-radius');
          }
        } @else if map-has-key($props, 'borderRadius') {
          &::before {
            border-top-right-radius: map-get($props, 'borderRadius');
            border-bottom-right-radius: map-get($props, 'borderRadius');
          }
        }

        @if map-has-key($props, 'selector') and isMap(map-get($props, 'selector')) {
          @include selectTheme(map-get($props, 'selector'));
        }
        > select {
          @include generateProperties(map-remove($props, 'selector'));
          @if map-has-key($props, 'padding') {
            padding-right: 0;
          }
        }
      }
    }
  }
}
