/**
 * Select
 */

@mixin selectTheme($theme) {
  @if map-has-key($theme, 'size') {
    &::before { width: (map-get($theme, 'size') * 4); }
    &::after {
      right: map-get($theme, 'size') * 1.5;
      width: map-get($theme, 'size');
      height: map-get($theme, 'size');
    }
  }
  @if map-has-key($theme, 'weight') {
    &::after {
      border-bottom-width: map-get($theme, 'weight');
      border-right-width: map-get($theme, 'weight');
    }
  }
  @if map-has-key($theme, 'bgcolor') {
    &::before { background-color: map-get($theme, 'bgcolor'); }
  }
  @if map-has-key($theme, 'color') {
    &::after {
      border-bottom-color: map-get($theme, 'color');
      border-right-color: map-get($theme, 'color');
    }
  }
}

@mixin initSelectField {
  [#{ooPrefix()}-select] {
    position: relative;
    display: block;

    &::before {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      content: '';

      $borderProps: oo('select.props.border');
      @if ($borderProps) {
        border-top: $borderProps;
        border-right: $borderProps;
        border-bottom: $borderProps;
      }
      $borderRadiusProps: if(oo('select.props.borderRadius'), oo('select.props.borderRadius'), oo('select.props.border-radius'));
      @if ($borderRadiusProps) {
        border-top-right-radius: $borderRadiusProps;
        border-bottom-right-radius: $borderRadiusProps;
      }
      pointer-events: none;
    }

    &::after {
      position: absolute;
      top: 50%;
      content: '';
      border-bottom-style: solid;
      border-right-style: solid;
      pointer-events: none;
      transform: rotateZ(45deg) translateY(-50%) translateX(-50%);
    }

    @if oo('select.selector.default') {
      @include selectTheme(oo('select.selector.default'));
    }
    @if oo('select.selector.variants') and isMap(oo('select.selector.variants')) {
      @each $name, $theme in oo('select.selector.variants') {
        &[#{ooPrefix()}-select~="#{$name}"] {
          @include selectTheme($theme);
        }
      }
    }

    > select {
      margin: 0;
      -webkit-appearance: none;
      -moz-appearance: none;
      &::-ms-expand { // hide the default arrow in ie10 and ie11
        display: none;
      }

      @if not oo('use.input.textfield') or oo('select.props') != oo('input.props') {
        @include generateProperties(oo('select.props'));
        @include generateProperties(oo('select.states'));
      } @else if oo('use.input.textfield')
        and oo('select.props') == oo('input.props')
        and oo('select.states') != oo('input.states') {
          @include generateProperties(oo('select.states'));
      }
    }

    @if oo('select.variants') and isMap(oo('select.variants')) {
      @each $name, $props in oo('select.variants') {
        &[#{ooPrefix()}-select~="#{$name}"] > select {
          @include generateProperties($props);
          @if map-has-key($props, 'padding') {
            padding-right: 0;
          }
        }
      }
    }

    &[class*="color-"] {
      > select { color: inherit !important; }
    }
    &[class*="bg-"] {
      > select { background-color: inherit !important; }
    }
    &[class*="border-"] {
      > select,
      &::before {
        border-color: inherit !important;
      }
    }
  }
}
