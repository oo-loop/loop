/**
 * Template Areas
 */

@function getAreaNames($areas) {
  $list: ();
  @each $area in $areas {
    $areaNames: split(' ', $area);
    @each $areaName in $areaNames {
      @if notInList($areaName, $list) {
        $list: join($list, $areaName);
      }
    }
  }
  @return $list;
}
@function getAreaColumnNumber($areas) {
  @if isEmpty($areas) {
    @return 0;
  }
  @each $area in $areas {
    $areaNames: split(' ', $area);
    @return length($areaNames);
  }
}

@mixin makeGridTemplate($grid-template-areas) {
  grid-template-areas: $grid-template-areas;
  grid-template-columns: repeat(getAreaColumnNumber($grid-template-areas), 1fr);
}
@mixin makeGridArea($areaNames) {
  @each $area in $areaNames {
    @if $area != '.' {
      [#{ooPrefix()}-area~="#{$area}"] {
        grid-area: #{$area};
      }
    }
  }
}
@mixin makeGrid($grid-template-areas) {
  @include makeGridTemplate($grid-template-areas);
  @include makeGridArea(getAreaNames($grid-template-areas));
}
@mixin makeGridOnBreakpoints($grid-template-areas) {
  $area-names-list: ();
  @each $breakpoint, $areas in $grid-template-areas {
    $area-names-list: getAreaNames(join($area-names-list, getAreaNames($areas)));
    @include breakpoint($breakpoint) {
      @include makeGridTemplate($areas);
    }
  }
  @include makeGridArea($area-names-list);
}

@mixin makeGapOnBreakpoint($breakpoint, $gap-sizes, $vertical: false) {
  @include breakpoint($breakpoint) {
    @each $gap-name, $gap-size in $gap-sizes {
      @if $vertical {
        [#{ooPrefix()}-template~="vgap-#{$gap-name}\@#{$breakpoint}"] { grid-row-gap: $gap-size; }
      } @else {
        [#{ooPrefix()}-template~="gap-#{$gap-name}\@#{$breakpoint}"] { grid-gap: $gap-size; }
      }
    }
  }
}
@mixin makeGapOnScreens($screens, $gap-sizes, $vertical: false) {
  @if isMap($screens) {
    @each $class, $gap-names in $screens {
      @if isEmpty($gap-names) {
        @include makeGapOnBreakpoint($class, $gap-sizes, $vertical);
      } @else {
        $gap-names: toList($gap-names);
        $gap-targets: ();
        @each $name in $gap-names {
          $size: oo(#{$name}, $gap-sizes);
          @if $size{
            $gap-targets: map-merge($gap-targets, ($name: $size));
          }
        }
        @include makeGapOnBreakpoint($class, $gap-targets, $vertical);
      }
    }
  } @else {
    @if isString($screens) {
      $screens: toList($screens);
    }
    @each $class in $screens {
      @include makeGapOnBreakpoint($class, $gap-sizes, $vertical);
    }
  }
}

@mixin makeTemplate($template) {
  @if isList(oo('areas', $template)) {
    [#{ooPrefix()}-template] {
      @include makeGrid(oo('areas', $template));
    }
  } @else if isMap(oo('areas', $template)) {
    @if areKeysBreakpoints(oo('areas', $template)) {
      [#{ooPrefix()}-template] {
        @include makeGridOnBreakpoints(oo('areas', $template));
      }
    } @else {
      @each $area-name, $grid in oo('areas', $template) {
        [#{ooPrefix()}-template~="#{$area-name}"] {
          @if isMap($grid) {
            @include makeGridOnBreakpoints($grid);
          } @else if isList($grid) {
            @include makeGrid($grid);
          }
        }
      }
    }
  }
}

@mixin Template($template: oo('template')) {
  @include initComponent('template', $template);

  @if isNotEmpty(oo('areas', $template)) {
    [#{ooPrefix()}-template] {
      display: grid;
    }
    @include makeTemplate($template);
  }

  $screens: oo('gap.screens', $template);
  $gap-sizes: oo('gap.sizes', $template);
  @if $gap-sizes {
    $gap-sizes: if(isString($gap-sizes), (default: $gap-sizes), $gap-sizes);
    @if areKeysBreakpoints($gap-sizes) {
      [#{ooPrefix()}-template] {
        @each $key, $value in $gap-sizes {
          @include breakpoint($key) {
            grid-gap: $value;
          }
        }
      }
    } @else {
      $non-responsise-gap-sizes: ();
      @each $gap-name, $gap-size in $gap-sizes {
        $selector: if(isEmpty($gap-name) or $gap-name == 'default', 'template', 'template~="gap-#{$gap-name}"');
        [#{ooPrefix()}-#{$selector}] {
          @if (isMap($gap-size)) {
            @each $key, $value in $gap-size {
              @include breakpoint($key) {
                grid-gap: $value;
              }
            }
          } @else {
            grid-gap: $gap-size;
            $non-responsise-gap-sizes: map-merge(($gap-name: $gap-size), $non-responsise-gap-sizes)
          }
        }
      }
      @if $screens {
        @include makeGapOnScreens($screens, $non-responsise-gap-sizes);
      }
    }
  }

  $vscreens: oo('gap.vscreens', $template);
  $vgap-sizes: oo('gap.vsizes', $template);
  @if $vgap-sizes {
    $vgap-sizes: if(isString($vgap-sizes), (default: $vgap-sizes), $vgap-sizes);
    @if areKeysBreakpoints($vgap-sizes) {
      [#{ooPrefix()}-template] {
        @each $key, $value in $vgap-sizes {
          @include breakpoint($key) {
            grid-row-gap: $value;
          }
        }
      }
    } @else {
      $non-responsise-vgap-sizes: ();
      @each $gap-name, $gap-size in $vgap-sizes {
        $selector: if(isEmpty($gap-name) or $gap-name == 'default', 'template', 'template~="vgap-#{$gap-name}"');
        [#{ooPrefix()}-#{$selector}] {
          @if (isMap($gap-size)) {
            @each $key, $value in $gap-size {
              @include breakpoint($key) {
                grid-row-gap: $value;
              }
            }
          } @else {
            grid-row-gap: $gap-size;
            $non-responsise-vgap-sizes: map-merge(($gap-name: $gap-size), $non-responsise-vgap-sizes)
          }
        }
      }
      @if $vscreens {
        @include makeGapOnScreens($vscreens, $non-responsise-vgap-sizes, true);
      }
    }
  }
}
