/**
 * Column
 */

@mixin initColumn {
  // row
  [#{ooPrefix()}-row] {
    position: relative;
    left: -#{oo('column.gutter.base')};
    margin-right: -#{oo('column.gutter.base')};

    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
  }

  // columns
  [#{ooPrefix()}-col] {
    padding-left: oo('column.gutter.base');
    padding-bottom: oo('column.gutter.base');

    flex-shrink: 0;
    flex-grow: 1;
    flex-basis: 0;

    min-width: 0;
    max-width: 100%;
  }

  // reponsives classes starting from root
  @each $class in join('', oo('column.screens')) {
    @include breakpoint($class) {
      $suffix: '';
      @if $class != '' {
        $suffix: \@#{$class};
      }

      // auto col
      [#{ooPrefix()}-col~="auto#{$suffix}"] {
        flex-basis: 0;
        max-width: 100%;
      }

      // columns
      @for $i from 1 through oo('column.system') {
        [#{ooPrefix()}-col~="s#{$i}#{$suffix}"] {
          flex-basis: percentage($i / oo('column.system'));
          max-width: percentage($i / oo('column.system'));
        }
      }

      @if oo('column.use.fitBreakpoints') or isEmpty($suffix) {
        // adjust to the size of the content
        [#{ooPrefix()}-col~="fit#{$suffix}"] {
          min-width: auto;
          flex-grow: 0;
          flex-basis: auto;
        }
      }

      @if oo('column.use.alignment')
        and (oo('column.use.alignmentBreakpoints') isEmpty($suffix)) {
        // horizontal alignment
        [#{ooPrefix()}-row~="align-left#{$suffix}"]   { justify-content: flex-start; }
        [#{ooPrefix()}-row~="align-center#{$suffix}"] { justify-content: center; }
        [#{ooPrefix()}-row~="align-right#{$suffix}"]  { justify-content: flex-end; }
        [#{ooPrefix()}-row~="align-evenly#{$suffix}"] { justify-content: space-evenly; }
        [#{ooPrefix()}-row~="align-between#{$suffix}"]{ justify-content: space-between; }

        // vertical alignment
        [#{ooPrefix()}-row~="valign-top#{$suffix}"]    { align-items: flex-start; }
        [#{ooPrefix()}-row~="valign-middle#{$suffix}"] { align-items: center; }
        [#{ooPrefix()}-row~="valign-bottom#{$suffix}"] { align-items: flex-end; }
      }

      @if oo('column.use.selfAlignment')
        and (oo('column.use.selfAlignmentBreakpoints') or isEmpty($suffix)) {
        // horizontal alignment
        [#{ooPrefix()}-col~="self-align-left#{$suffix}"]   { margin-left: initial; margin-right: initial; }
        [#{ooPrefix()}-col~="self-align-center#{$suffix}"] { margin-left: auto; margin-right: auto; }
        [#{ooPrefix()}-col~="self-align-right#{$suffix}"]  { margin-left: auto; margin-right: initial; }

        // vertical alignment
        [#{ooPrefix()}-col~="self-valign-top#{$suffix}"]    { align-self: flex-start; }
        [#{ooPrefix()}-col~="self-valign-middle#{$suffix}"] { align-self: center; }
        [#{ooPrefix()}-col~="self-valign-bottom#{$suffix}"] { align-self: flex-end; }
      }
    }
  }


  @if oo('column.use.childAlignment') {
    [#{ooPrefix()}-col*="child-align-"] > * {
      display: flex;
      flex-direction: column;
    }

    // horizontal alignment
    [#{ooPrefix()}-col~="child-align-left"] > *    { align-items: flex-start; }
    [#{ooPrefix()}-col~="child-align-center"] > *  { align-items: center; }
    [#{ooPrefix()}-col~="child-align-right"] > *   { align-items: flex-end; }

    // vertical alignment
    [#{ooPrefix()}-col~="child-valign-top"] > *    { justify-content: flex-start; }
    [#{ooPrefix()}-col~="child-valign-middle"] > * { justify-content: center; }
    [#{ooPrefix()}-col~="child-valign-bottom"] > * { justify-content: flex-end; }
  }


  // responsive classes
  @each $class in oo('column.screens') {
    @include breakpoint($class) {
      $suffix: \@#{$class};

      // order-0 to make sure it is first
      @if oo('column.use.order') {
        [#{ooPrefix()}-col~="order-0#{$suffix}"] { order: -1; }
      }
      @for $i from 1 through oo('column.system') {
        // offset
        @if oo('column.use.offset') == true {
          [#{ooPrefix()}-col~="offset-#{$i}#{$suffix}"] { margin-left: percentage($i / oo('column.system')); }
        }
        // order
        @if oo('column.use.order') {
          [#{ooPrefix()}-col~="order-#{$i}#{$suffix}"] { order: $i; }
        }
      }
    }
  }


  // stretch
  [#{ooPrefix()}-row~="stretch"] {
    align-items: stretch;
    > [#{ooPrefix()}-col] {
      display: flex;
      > * {
        width:100%;
      }
    }
  }

  // gutters
  @each $class in join('', oo('column.gutter.h.screens')) {
    @include breakpoint($class) {
      $suffix: if(isEmpty($class), '', \@#{$class});
      @each $gutter-name, $gutter-size in oo('column.gutter.h.sizes') {
        [#{ooPrefix()}-row~="gutter-#{$gutter-name}#{$suffix}"] {
          left: -#{$gutter-size};
          margin-right: -#{$gutter-size};

          > [#{ooPrefix()}-col] {
            padding-bottom: $gutter-size;
            padding-left: $gutter-size;
          }
        }
      }
    }
  }

  @each $class in join('', oo('column.gutter.v.screens')) {
    @include breakpoint($class) {
      $suffix: if(isEmpty($class), '', \@#{$class});
      @each $gutter-name, $gutter-size in oo('column.gutter.v.sizes') {
        [#{ooPrefix()}-row~="vgutter-#{$gutter-name}#{$suffix}"] {
          > [#{ooPrefix()}-col] {
            padding-bottom: $gutter-size;
          }
        }
      }
    }
  }

  // clear
  [#{ooPrefix()}-col~="clear"] {
    padding: 0;
    flex-basis: 100%;
    max-width: 100%;
  }
}  
