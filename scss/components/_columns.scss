/**
 * Column
 */

@mixin columnGutterProps($size) {
  left: -#{$size};
  margin-right: -#{$size};
  > [#{ooPrefix()}-col] {
    padding-left: $size;
  }
}
@mixin columnGutterScreens($screens, $vertical:false) {
  $screens: if(isString($screens), toList($screens), $screens);
  $config-name: if($vertical, 'column.gutter.vsizes', 'column.gutter.sizes');
  $prefix: if($vertical, 'vgutter', 'gutter');

  @each $class, $gutter-name in $screens {
    @include breakpoint($class) {
      $suffix: \@#{$class};
      @if isNotEmpty($gutter-name) {
        $gutter-names: toList($gutter-name);
        @each $name in $gutter-names {
          $gutter-size: oo('#{$config-name}.#{$name}');
          @if $gutter-size {
            [#{ooPrefix()}-row~="#{$prefix}-#{$name}#{$suffix}"] {
              @if $vertical {
                > [#{ooPrefix()}-col] {
                  padding-bottom: $gutter-size;
                }
              } @else {
                @include columnGutterProps($gutter-size);
              }
            }
          }
        }
      } @else {
        @each $gutter-name, $gutter-size in oo('#{$config-name}') {
          @if isString($gutter-size) or isNumber($gutter-size) {
            [#{ooPrefix()}-row~="#{$prefix}-#{$gutter-name}#{$suffix}"] {
              @if $vertical {
                > [#{ooPrefix()}-col] {
                  padding-bottom: $gutter-size;
                }
              } @else {
                @include columnGutterProps($gutter-size);
              }
            }
          } 
        }
      }
    }
  }
}

@mixin initColumn {
  [#{ooPrefix()}-row] {
    position: relative;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
  }

  [#{ooPrefix()}-col] {
    flex-shrink: 0;
    flex-grow: 1;
    flex-basis: 0;
    min-width: 0;
    max-width: 100%;
  }

  // reponsives classes starting from root
  @each $class in join('rt', oo('column.screens')) {
    @include breakpoint($class) {
      $suffix: '';
      @if $class != 'rt' {
        $suffix: \@#{$class};
      }

      // auto col
      [#{ooPrefix()}-col~="auto#{$suffix}"] {
        flex-basis: 0;
        max-width: 100%;
      }

      // columns
      @for $i from 1 through oo('column.system') {
        [#{ooPrefix()}-col~="s#{$i}#{$suffix}"] {
          flex-basis: percentage($i / oo('column.system'));
          max-width: percentage($i / oo('column.system'));
        }
      }

      @if oo('use.column.fitBreakpoints') or isEmpty($suffix) {
        // adjust to the size of the content
        [#{ooPrefix()}-col~="fit#{$suffix}"] {
          min-width: auto;
          flex-grow: 0;
          flex-basis: auto;
        }
      }

      @if oo('use.column.alignment')
        and (oo('use.column.alignmentBreakpoints') or isEmpty($suffix)) {
        // horizontal alignment
        [#{ooPrefix()}-row~="align-left#{$suffix}"]   { justify-content: flex-start; }
        [#{ooPrefix()}-row~="align-center#{$suffix}"] { justify-content: center; }
        [#{ooPrefix()}-row~="align-right#{$suffix}"]  { justify-content: flex-end; }
        [#{ooPrefix()}-row~="align-evenly#{$suffix}"] { justify-content: space-evenly; }
        [#{ooPrefix()}-row~="align-between#{$suffix}"]{ justify-content: space-between; }

        // vertical alignment
        [#{ooPrefix()}-row~="valign-top#{$suffix}"]    { align-items: flex-start; }
        [#{ooPrefix()}-row~="valign-middle#{$suffix}"] { align-items: center; }
        [#{ooPrefix()}-row~="valign-bottom#{$suffix}"] { align-items: flex-end; }
      }

      @if oo('use.column.selfAlignment')
        and (oo('use.column.selfAlignmentBreakpoints') or isEmpty($suffix)) {
        // horizontal alignment
        [#{ooPrefix()}-col~="self-align-left#{$suffix}"]   { margin-left: initial; margin-right: initial; }
        [#{ooPrefix()}-col~="self-align-center#{$suffix}"] { margin-left: auto; margin-right: auto; }
        [#{ooPrefix()}-col~="self-align-right#{$suffix}"]  { margin-left: auto; margin-right: initial; }

        // vertical alignment
        [#{ooPrefix()}-col~="self-valign-top#{$suffix}"]    { align-self: flex-start; }
        [#{ooPrefix()}-col~="self-valign-middle#{$suffix}"] { align-self: center; }
        [#{ooPrefix()}-col~="self-valign-bottom#{$suffix}"] { align-self: flex-end; }
      }
    }
  }

  @if oo('use.column.childAlignment') {
    [#{ooPrefix()}-col*="child-align-"] > * {
      display: flex;
      flex-direction: column;
    }

    // horizontal alignment
    [#{ooPrefix()}-col~="child-align-left"] > *    { align-items: flex-start; }
    [#{ooPrefix()}-col~="child-align-center"] > *  { align-items: center; }
    [#{ooPrefix()}-col~="child-align-right"] > *   { align-items: flex-end; }

    // vertical alignment
    [#{ooPrefix()}-col~="child-valign-top"] > *    { justify-content: flex-start; }
    [#{ooPrefix()}-col~="child-valign-middle"] > * { justify-content: center; }
    [#{ooPrefix()}-col~="child-valign-bottom"] > * { justify-content: flex-end; }
  }


  // responsive classes
  @each $class in oo('column.screens') {
    @include breakpoint($class) {
      $suffix: \@#{$class};

      // order-0 to make sure it is first
      @if oo('use.column.order') {
        [#{ooPrefix()}-col~="order-0#{$suffix}"] { order: -1; }
      }
      @for $i from 1 through oo('column.system') {
        // offset
        @if oo('use.column.offset') {
          [#{ooPrefix()}-col~="offset-#{$i}#{$suffix}"] { margin-left: percentage($i / oo('column.system')); }
        }
        // order
        @if oo('use.column.order') {
          [#{ooPrefix()}-col~="order-#{$i}#{$suffix}"] { order: $i; }
        }
      }
    }
  }


  // stretch
  [#{ooPrefix()}-row~="stretch"] {
    align-items: stretch;
    > [#{ooPrefix()}-col] {
      display: flex;
      > * {
        width:100%;
      }
    }
  }

  // gutter
  @each $gutter-name, $gutter-size in oo('column.gutter.sizes') {
    $selector: if(isEmpty($gutter-name) or $gutter-name == 'default', 'row', 'row~="gutter-#{$gutter-name}"');
    [#{ooPrefix()}-#{$selector}] {
      @if (isMap($gutter-size)) {
        @each $key, $value in $gutter-size {
          @include breakpoint($key) {
            @include columnGutterProps($value);
          }
        }
      } @else if isString($gutter-size) or isNumber($gutter-size) {
        @include columnGutterProps($gutter-size);
      }
    }
  }
  @include columnGutterScreens(oo('column.gutter.screens'));

  // vgutter
  @each $gutter-name, $vgutter-size in oo('column.gutter.vsizes') {
    $suffix: if(isEmpty($gutter-name) or $gutter-name == 'default', '', '-#{$gutter-name}');
    [#{ooPrefix()}-row~="vgutter#{$suffix}"] {
      > [#{ooPrefix()}-col] {
        @if (isMap($vgutter-size)) {
          @each $key, $value in $vgutter-size {
            @include breakpoint($key) {
              padding-bottom: $value;
            }
          }
        } @else if isString($vgutter-size) or isNumber($vgutter-size) {
          padding-bottom: $vgutter-size;
        }
      }
    }
  }
  @include columnGutterScreens(oo('column.gutter.vscreens'), true);

  // clear
  [#{ooPrefix()}-col~="clear"] {
    padding: 0;
    flex-basis: 100%;
    max-width: 100%;
  }
}  
