@use 'sass:color';

// Button

@mixin paintButton($color-value) {
  @if isColor($color-value) {
    $color: if(isBright($color-value), color.adjust($color-value, $lightness: -80%), #fff);
    
    color: $color;
    background-color: $color-value;
    @if oo('button.props.border') {
      border-color: $color-value;
    }
  
    @if oo('button.outline') {
      &[#{ooPrefix()}-button~="outline"] {
        color: if(isBright($color-value, 210), color.adjust($color-value, $lightness: -30%), $color-value);
        background: transparent;
        box-shadow: none;
  
        @if oo('button.props.border') and isBright($color-value, 210) {
          border-color: color.adjust($color-value, $lightness: -30%);
        }
      }
    }
  
    &:hover:not(:disabled),
    &:focus:not(:disabled) {
      color: $color;
      background-color: color.adjust($color-value, $lightness: -10%);
      @if oo('button.props.border') {
        border-color: color.adjust($color-value, $lightness: -10%);
      }
      @if oo('button.outline') {
        &[#{ooPrefix()}-button~="outline"] {
          background-color: $color-value;
          @if oo('button.props.border') {
            border-color: $color-value;
          }
        }
      }
    }
    &:focus:not(:disabled) {
      outline: none;
      box-shadow: 0 0 3px 4px color.adjust($color-value, $lightness: 5%);
    }
    &:active:not(:disabled) {
      color: $color;
      background-color: color.adjust($color-value, $lightness: -12%);
      box-shadow: inset  1px 1px 1px 0 color.adjust($color-value, $lightness: -25%);
      outline: none;
      @if oo('button.props.border') {
        border-color: color.adjust($color-value, $lightness: -12%);
      }
    }
  }
}

@mixin Button($param: null) {
  @include initElement('button', $param);

  [#{ooPrefix()}-button] {
    display: inline-block;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;

    cursor: pointer;
    user-select: none;
    touch-action: manipulation;
    -webkit-appearance: none;
    -moz-appearance: none;

    &:disabled {
      cursor: not-allowed;
    }

    @include generateProperties(oo('button.props'));
    @include generateStatesProperties(oo('button.states'));
  }
  
  @if isNotEmpty(oo('button.colors') and isMap(oo('button.colors'))) {
    @each $name, $value in oo('button.colors') {
      [#{ooPrefix()}-button~="#{$name}"] {
        @include paintButton($value);
      }
    }
  }

  @if isNotEmpty(oo('button.variants')) {
    @include generateComponentVariants('button', oo('button.variants'));
  }
}