/**
 * Typography
 */

@mixin Headings($param: null) {
  @include initElement('headings', $param);

  @if isNotEmpty(oo('headings.props')) {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      @include generateProperties(oo('headings.props'));
    }
  }

  @if isNotEmpty(oo('headings.sizes')) {
    @each $heading, $font-size in oo('headings.sizes') {
      #{$heading} {
        @if isMap($font-size) {
          @each $key, $value in $font-size {
            @include breakpoint($key) {
              font-size: $value;
            }
          }
        } @else {
          font-size: $font-size;
        }
      }
      @if isNotEmpty(oo('headings.classes')) and inList($heading, oo('headings.classes')) {
        .#{$heading} {
          @extend #{$heading};
        }
      }
    }
  }
}

@mixin Type($param: null) {
  @include initElement('type', $param, false);

  @if oo('paragraph.props') {
    p {
      @include generateProperties(oo('paragraph.props'));
    }
  }
  
  @if oo('anchor.props') {
    a {
      @include generateProperties(oo('anchor.props'));
    }
    @if oo('anchor.states') {
      [href] {
        @include generateStatesProperties(oo('anchor.states'));
      }
    }
  }
  
  ul,
  ol {
    @if oo('list.props') {
      @include generateProperties(oo('list.props'));
    }
    > ul, ol {
      margin-top: .3em;
      margin-bottom: .5em;
    }
  }

  hr, .hr {
    display: block;
    border: none;
    @if oo('hr.props') {
      @include generateProperties(oo('hr.props'));
    }
  }
}
