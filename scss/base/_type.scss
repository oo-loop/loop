/**
 * Typography
 */

@mixin initType {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @if oo('headings.props') {
      @each $property-name, $property-value in oo('headings.props') {
        $property-name: toKebabCase($property-name);
        #{$property-name}: $property-value;
      }
    }
  }
  
  @if oo('headings.sizes') {
    @each $heading, $font-size in oo('headings.sizes') {
      #{$heading} {
        @if isMap($font-size) {
          @each $key, $value in $font-size {
            @include breakpoint($key) {
              font-size: $value;
            }
          }
        } @else {
          font-size: $font-size;
        }
      }
      @if inList($heading, oo('headings.classes')) {
        .#{$heading} {
          @extend #{$heading};
        }
      }
    }
  }
  
  p {
    margin-top: 0;
    margin-bottom: oo('paragraph.marginBottom');
  }
  
  a {
    color: oo('anchor.color');
    text-decoration: none;
  
    &[href]:focus,
    &[href]:hover {
      color: oo('anchor.hover');
      text-decoration: oo('anchor.textDecoration');
    }
  }
  
  ul,
  ol,
  dl {
    margin-top: 0;
    margin-bottom: oo('list.marginBottom');
  }
  
  ul,
  ol {
    padding-left: 18px;
  
    > ul, ol {
      margin-top: .3em;
      margin-bottom: .5em
    }
  }
  
  dt { font-weight: oo('list.dt.fontWeight') }
  dd {
    margin-left: auto;
    + dt {
      margin-top: .5em;
    }
  }
  
  hr, .hr {
    margin-top: oo('hr.margin');
    margin-bottom: oo('hr.margin');
    display: block;
    border:none;
    border-bottom: 1px solid oo('hr.color');
  }
}
