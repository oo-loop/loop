/**
 * Typography
 */

$heading-sizes: oo('headings.sizes');

@mixin headings($heading, $font-size) {
  margin-top: oo('headings.marginTop');
  margin-bottom: oo('headings.marginBottom');
  font-weight: oo('headings.fontWeight');
  line-height: oo('headings.lineHeight');

  // font-size
  @if isMap($font-size) {
    @each $key, $value in $font-size {
      @include breakpoint($key) {
        font-size: $value;
      }
    }
  } @else {
    font-size: $font-size;
  }

  // add letter spacing for specific
  @if isNotEmpty(oo('headings.letterSpacing.gap'))
    and inList($heading, oo('headings.letterSpacing.headings')) {
    letter-spacing: oo('headings.letterSpacing.gap');
  }

  //add font family rules if different
  @if oo('headings.fontFamily') != oo('base.font.family') {
    font-family: oo('headings.fontFamily');
  }

  //add color rules if different
  @if oo('headings.color') != oo('base.color') {
    color: oo('headings.color');
  }
}

@each $heading, $font-size in $heading-sizes {
  #{$heading} {
    @include headings($heading, $font-size);
  }
  @if inList($heading, oo('headings.classes')) {
    .#{$heading} {
      @extend #{$heading};
    }
  }
}

p {
  margin-top: 0;
  margin-bottom: oo('paragraph.marginBottom');
}

a {
  color: oo('anchor.color');
  text-decoration: none;

  &:focus,
  &:hover {
    color: oo('anchor.hover');
    text-decoration: oo('anchor.textDecoration');
  }
}

ul,
ol,
dl {
  margin-top: 0;
  margin-bottom: oo('list.marginBottom');
}

ul,
ol {
  padding-left: 18px;

  li { margin-bottom: .2em;}

  > ul, ol {
    margin-top: .3em;
    margin-bottom: .5em
  }
}

dt { font-weight: oo('list.dt.fontWeight') }
dd {
  margin-left: auto;
  + dt {
    margin-top: .5em;
  }
}

mark {
  color: inherit;
  background-color: lighten(yellow, 40%);
}

hr, .hr {
  margin-top: oo('hr.margin');
  margin-bottom: oo('hr.margin');
  display: block;
  border:none;
  border-bottom: 1px solid oo('hr.color');
}
